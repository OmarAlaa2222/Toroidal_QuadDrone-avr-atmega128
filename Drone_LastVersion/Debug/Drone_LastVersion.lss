
Drone_LastVersion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000028d2  00002966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800208  00800208  00002a6e  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106a  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000060ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000628a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000647a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000add8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f4  00000000  00000000  0000af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ed       	ldi	r30, 0xD2	; 210
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 32       	cpi	r26, 0x25	; 37
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <main>
      c6:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 74 05 	call	0xae8	; 0xae8 <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 74 05 	call	0xae8	; 0xae8 <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 74 05 	call	0xae8	; 0xae8 <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 74 05 	call	0xae8	; 0xae8 <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__gesf2+0x56>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__gesf2+0x56>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__gesf2+0x58>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__+0x18>

00000886 <__ltsf2>:
     886:	a8 e1       	ldi	r26, 0x18	; 24
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__+0x18>
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	2d 83       	std	Y+5, r18	; 0x05
     89c:	3e 83       	std	Y+6, r19	; 0x06
     89e:	4f 83       	std	Y+7, r20	; 0x07
     8a0:	58 87       	std	Y+8, r21	; 0x08
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f1 2c       	mov	r15, r1
     8a8:	ec 0e       	add	r14, r28
     8aa:	fd 1e       	adc	r15, r29
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5e       	subi	r16, 0xEF	; 239
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	ce 01       	movw	r24, r28
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	40 f0       	brcs	.+16     	; 0x8dc <__ltsf2+0x56>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__ltsf2+0x56>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fpcmp_parts_f>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__ltsf2+0x58>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	e6 e0       	ldi	r30, 0x06	; 6
     8e2:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__+0x18>

000008e6 <__floatsisf>:
     8e6:	a8 e0       	ldi	r26, 0x08	; 8
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x12>
     8f2:	9b 01       	movw	r18, r22
     8f4:	ac 01       	movw	r20, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	da 01       	movw	r26, r20
     8fc:	c9 01       	movw	r24, r18
     8fe:	88 27       	eor	r24, r24
     900:	b7 fd       	sbrc	r27, 7
     902:	83 95       	inc	r24
     904:	99 27       	eor	r25, r25
     906:	aa 27       	eor	r26, r26
     908:	bb 27       	eor	r27, r27
     90a:	b8 2e       	mov	r11, r24
     90c:	21 15       	cp	r18, r1
     90e:	31 05       	cpc	r19, r1
     910:	41 05       	cpc	r20, r1
     912:	51 05       	cpc	r21, r1
     914:	19 f4       	brne	.+6      	; 0x91c <__floatsisf+0x36>
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	3a c0       	rjmp	.+116    	; 0x990 <__floatsisf+0xaa>
     91c:	88 23       	and	r24, r24
     91e:	a9 f0       	breq	.+42     	; 0x94a <__floatsisf+0x64>
     920:	20 30       	cpi	r18, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	38 07       	cpc	r19, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	48 07       	cpc	r20, r24
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	58 07       	cpc	r21, r24
     92e:	29 f4       	brne	.+10     	; 0x93a <__floatsisf+0x54>
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	9f ec       	ldi	r25, 0xCF	; 207
     938:	30 c0       	rjmp	.+96     	; 0x99a <__floatsisf+0xb4>
     93a:	ee 24       	eor	r14, r14
     93c:	ff 24       	eor	r15, r15
     93e:	87 01       	movw	r16, r14
     940:	e2 1a       	sub	r14, r18
     942:	f3 0a       	sbc	r15, r19
     944:	04 0b       	sbc	r16, r20
     946:	15 0b       	sbc	r17, r21
     948:	02 c0       	rjmp	.+4      	; 0x94e <__floatsisf+0x68>
     94a:	79 01       	movw	r14, r18
     94c:	8a 01       	movw	r16, r20
     94e:	8e e1       	ldi	r24, 0x1E	; 30
     950:	c8 2e       	mov	r12, r24
     952:	d1 2c       	mov	r13, r1
     954:	dc 82       	std	Y+4, r13	; 0x04
     956:	cb 82       	std	Y+3, r12	; 0x03
     958:	ed 82       	std	Y+5, r14	; 0x05
     95a:	fe 82       	std	Y+6, r15	; 0x06
     95c:	0f 83       	std	Y+7, r16	; 0x07
     95e:	18 87       	std	Y+8, r17	; 0x08
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	0e 94 25 05 	call	0xa4a	; 0xa4a <__clzsi2>
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	18 16       	cp	r1, r24
     96c:	19 06       	cpc	r1, r25
     96e:	84 f4       	brge	.+32     	; 0x990 <__floatsisf+0xaa>
     970:	08 2e       	mov	r0, r24
     972:	04 c0       	rjmp	.+8      	; 0x97c <__floatsisf+0x96>
     974:	ee 0c       	add	r14, r14
     976:	ff 1c       	adc	r15, r15
     978:	00 1f       	adc	r16, r16
     97a:	11 1f       	adc	r17, r17
     97c:	0a 94       	dec	r0
     97e:	d2 f7       	brpl	.-12     	; 0x974 <__floatsisf+0x8e>
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 1a       	sub	r12, r24
     98a:	d9 0a       	sbc	r13, r25
     98c:	dc 82       	std	Y+4, r13	; 0x04
     98e:	cb 82       	std	Y+3, r12	; 0x03
     990:	ba 82       	std	Y+2, r11	; 0x02
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	0e 94 74 05 	call	0xae8	; 0xae8 <__pack_f>
     99a:	28 96       	adiw	r28, 0x08	; 8
     99c:	e9 e0       	ldi	r30, 0x09	; 9
     99e:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x12>

000009a2 <__fixsfsi>:
     9a2:	ac e0       	ldi	r26, 0x0C	; 12
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__prologue_saves__+0x20>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	be 01       	movw	r22, r28
     9bc:	6b 5f       	subi	r22, 0xFB	; 251
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	0e 94 49 06 	call	0xc92	; 0xc92 <__unpack_f>
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	61 f1       	breq	.+88     	; 0xa22 <__fixsfsi+0x80>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	50 f1       	brcs	.+84     	; 0xa22 <__fixsfsi+0x80>
     9ce:	84 30       	cpi	r24, 0x04	; 4
     9d0:	21 f4       	brne	.+8      	; 0x9da <__fixsfsi+0x38>
     9d2:	8e 81       	ldd	r24, Y+6	; 0x06
     9d4:	88 23       	and	r24, r24
     9d6:	51 f1       	breq	.+84     	; 0xa2c <__fixsfsi+0x8a>
     9d8:	2e c0       	rjmp	.+92     	; 0xa36 <__fixsfsi+0x94>
     9da:	2f 81       	ldd	r18, Y+7	; 0x07
     9dc:	38 85       	ldd	r19, Y+8	; 0x08
     9de:	37 fd       	sbrc	r19, 7
     9e0:	20 c0       	rjmp	.+64     	; 0xa22 <__fixsfsi+0x80>
     9e2:	6e 81       	ldd	r22, Y+6	; 0x06
     9e4:	2f 31       	cpi	r18, 0x1F	; 31
     9e6:	31 05       	cpc	r19, r1
     9e8:	1c f0       	brlt	.+6      	; 0x9f0 <__fixsfsi+0x4e>
     9ea:	66 23       	and	r22, r22
     9ec:	f9 f0       	breq	.+62     	; 0xa2c <__fixsfsi+0x8a>
     9ee:	23 c0       	rjmp	.+70     	; 0xa36 <__fixsfsi+0x94>
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	82 1b       	sub	r24, r18
     9f6:	93 0b       	sbc	r25, r19
     9f8:	29 85       	ldd	r18, Y+9	; 0x09
     9fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     9fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__fixsfsi+0x68>
     a02:	56 95       	lsr	r21
     a04:	47 95       	ror	r20
     a06:	37 95       	ror	r19
     a08:	27 95       	ror	r18
     a0a:	8a 95       	dec	r24
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__fixsfsi+0x60>
     a0e:	66 23       	and	r22, r22
     a10:	b1 f0       	breq	.+44     	; 0xa3e <__fixsfsi+0x9c>
     a12:	50 95       	com	r21
     a14:	40 95       	com	r20
     a16:	30 95       	com	r19
     a18:	21 95       	neg	r18
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	4f 4f       	sbci	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <__fixsfsi+0x9c>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__fixsfsi+0x9c>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	3f ef       	ldi	r19, 0xFF	; 255
     a30:	4f ef       	ldi	r20, 0xFF	; 255
     a32:	5f e7       	ldi	r21, 0x7F	; 127
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e8       	ldi	r21, 0x80	; 128
     a3e:	b9 01       	movw	r22, r18
     a40:	ca 01       	movw	r24, r20
     a42:	2c 96       	adiw	r28, 0x0c	; 12
     a44:	e2 e0       	ldi	r30, 0x02	; 2
     a46:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__epilogue_restores__+0x20>

00000a4a <__clzsi2>:
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	7b 01       	movw	r14, r22
     a54:	8c 01       	movw	r16, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	e8 16       	cp	r14, r24
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	f8 06       	cpc	r15, r24
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	08 07       	cpc	r16, r24
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	18 07       	cpc	r17, r24
     a66:	88 f4       	brcc	.+34     	; 0xa8a <__clzsi2+0x40>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	e8 16       	cp	r14, r24
     a6c:	f1 04       	cpc	r15, r1
     a6e:	01 05       	cpc	r16, r1
     a70:	11 05       	cpc	r17, r1
     a72:	31 f0       	breq	.+12     	; 0xa80 <__clzsi2+0x36>
     a74:	28 f0       	brcs	.+10     	; 0xa80 <__clzsi2+0x36>
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	17 c0       	rjmp	.+46     	; 0xaae <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	12 c0       	rjmp	.+36     	; 0xaae <__clzsi2+0x64>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	e8 16       	cp	r14, r24
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	f8 06       	cpc	r15, r24
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 07       	cpc	r16, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	18 07       	cpc	r17, r24
     a9a:	28 f0       	brcs	.+10     	; 0xaa6 <__clzsi2+0x5c>
     a9c:	88 e1       	ldi	r24, 0x18	; 24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__clzsi2+0x64>
     aa6:	80 e1       	ldi	r24, 0x10	; 16
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	a0 e0       	ldi	r26, 0x00	; 0
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	20 e2       	ldi	r18, 0x20	; 32
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	28 1b       	sub	r18, r24
     ab8:	39 0b       	sbc	r19, r25
     aba:	4a 0b       	sbc	r20, r26
     abc:	5b 0b       	sbc	r21, r27
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__clzsi2+0x7e>
     ac0:	16 95       	lsr	r17
     ac2:	07 95       	ror	r16
     ac4:	f7 94       	ror	r15
     ac6:	e7 94       	ror	r14
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__clzsi2+0x76>
     acc:	f7 01       	movw	r30, r14
     ace:	e8 5f       	subi	r30, 0xF8	; 248
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	80 81       	ld	r24, Z
     ad4:	28 1b       	sub	r18, r24
     ad6:	31 09       	sbc	r19, r1
     ad8:	41 09       	sbc	r20, r1
     ada:	51 09       	sbc	r21, r1
     adc:	c9 01       	movw	r24, r18
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <__pack_f>:
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	fc 01       	movw	r30, r24
     af4:	e4 80       	ldd	r14, Z+4	; 0x04
     af6:	f5 80       	ldd	r15, Z+5	; 0x05
     af8:	06 81       	ldd	r16, Z+6	; 0x06
     afa:	17 81       	ldd	r17, Z+7	; 0x07
     afc:	d1 80       	ldd	r13, Z+1	; 0x01
     afe:	80 81       	ld	r24, Z
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	48 f4       	brcc	.+18     	; 0xb16 <__pack_f+0x2e>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a0 e1       	ldi	r26, 0x10	; 16
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e8 2a       	or	r14, r24
     b0e:	f9 2a       	or	r15, r25
     b10:	0a 2b       	or	r16, r26
     b12:	1b 2b       	or	r17, r27
     b14:	a5 c0       	rjmp	.+330    	; 0xc60 <__pack_f+0x178>
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	09 f4       	brne	.+2      	; 0xb1c <__pack_f+0x34>
     b1a:	9f c0       	rjmp	.+318    	; 0xc5a <__pack_f+0x172>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	21 f4       	brne	.+8      	; 0xb28 <__pack_f+0x40>
     b20:	ee 24       	eor	r14, r14
     b22:	ff 24       	eor	r15, r15
     b24:	87 01       	movw	r16, r14
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <__pack_f+0x4a>
     b28:	e1 14       	cp	r14, r1
     b2a:	f1 04       	cpc	r15, r1
     b2c:	01 05       	cpc	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	19 f4       	brne	.+6      	; 0xb38 <__pack_f+0x50>
     b32:	e0 e0       	ldi	r30, 0x00	; 0
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	96 c0       	rjmp	.+300    	; 0xc64 <__pack_f+0x17c>
     b38:	62 81       	ldd	r22, Z+2	; 0x02
     b3a:	73 81       	ldd	r23, Z+3	; 0x03
     b3c:	9f ef       	ldi	r25, 0xFF	; 255
     b3e:	62 38       	cpi	r22, 0x82	; 130
     b40:	79 07       	cpc	r23, r25
     b42:	0c f0       	brlt	.+2      	; 0xb46 <__pack_f+0x5e>
     b44:	5b c0       	rjmp	.+182    	; 0xbfc <__pack_f+0x114>
     b46:	22 e8       	ldi	r18, 0x82	; 130
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	26 1b       	sub	r18, r22
     b4c:	37 0b       	sbc	r19, r23
     b4e:	2a 31       	cpi	r18, 0x1A	; 26
     b50:	31 05       	cpc	r19, r1
     b52:	2c f0       	brlt	.+10     	; 0xb5e <__pack_f+0x76>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	2a c0       	rjmp	.+84     	; 0xbb2 <__pack_f+0xca>
     b5e:	b8 01       	movw	r22, r16
     b60:	a7 01       	movw	r20, r14
     b62:	02 2e       	mov	r0, r18
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x86>
     b66:	76 95       	lsr	r23
     b68:	67 95       	ror	r22
     b6a:	57 95       	ror	r21
     b6c:	47 95       	ror	r20
     b6e:	0a 94       	dec	r0
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x7e>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__pack_f+0x9c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__pack_f+0x94>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__pack_f+0xbe>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	9a 01       	movw	r18, r20
     ba8:	ab 01       	movw	r20, r22
     baa:	28 2b       	or	r18, r24
     bac:	39 2b       	or	r19, r25
     bae:	4a 2b       	or	r20, r26
     bb0:	5b 2b       	or	r21, r27
     bb2:	da 01       	movw	r26, r20
     bb4:	c9 01       	movw	r24, r18
     bb6:	8f 77       	andi	r24, 0x7F	; 127
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	a0 70       	andi	r26, 0x00	; 0
     bbc:	b0 70       	andi	r27, 0x00	; 0
     bbe:	80 34       	cpi	r24, 0x40	; 64
     bc0:	91 05       	cpc	r25, r1
     bc2:	a1 05       	cpc	r26, r1
     bc4:	b1 05       	cpc	r27, r1
     bc6:	39 f4       	brne	.+14     	; 0xbd6 <__pack_f+0xee>
     bc8:	27 ff       	sbrs	r18, 7
     bca:	09 c0       	rjmp	.+18     	; 0xbde <__pack_f+0xf6>
     bcc:	20 5c       	subi	r18, 0xC0	; 192
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0xf6>
     bd6:	21 5c       	subi	r18, 0xC1	; 193
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
     bda:	4f 4f       	sbci	r20, 0xFF	; 255
     bdc:	5f 4f       	sbci	r21, 0xFF	; 255
     bde:	e0 e0       	ldi	r30, 0x00	; 0
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	20 30       	cpi	r18, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	3a 07       	cpc	r19, r26
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	4a 07       	cpc	r20, r26
     bec:	a0 e4       	ldi	r26, 0x40	; 64
     bee:	5a 07       	cpc	r21, r26
     bf0:	10 f0       	brcs	.+4      	; 0xbf6 <__pack_f+0x10e>
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	79 01       	movw	r14, r18
     bf8:	8a 01       	movw	r16, r20
     bfa:	27 c0       	rjmp	.+78     	; 0xc4a <__pack_f+0x162>
     bfc:	60 38       	cpi	r22, 0x80	; 128
     bfe:	71 05       	cpc	r23, r1
     c00:	64 f5       	brge	.+88     	; 0xc5a <__pack_f+0x172>
     c02:	fb 01       	movw	r30, r22
     c04:	e1 58       	subi	r30, 0x81	; 129
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	d8 01       	movw	r26, r16
     c0a:	c7 01       	movw	r24, r14
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0x144>
     c1e:	e7 fe       	sbrs	r14, 7
     c20:	0d c0       	rjmp	.+26     	; 0xc3c <__pack_f+0x154>
     c22:	80 e4       	ldi	r24, 0x40	; 64
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0x14c>
     c2c:	8f e3       	ldi	r24, 0x3F	; 63
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e8 0e       	add	r14, r24
     c36:	f9 1e       	adc	r15, r25
     c38:	0a 1f       	adc	r16, r26
     c3a:	1b 1f       	adc	r17, r27
     c3c:	17 ff       	sbrs	r17, 7
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__pack_f+0x162>
     c40:	16 95       	lsr	r17
     c42:	07 95       	ror	r16
     c44:	f7 94       	ror	r15
     c46:	e7 94       	ror	r14
     c48:	31 96       	adiw	r30, 0x01	; 1
     c4a:	87 e0       	ldi	r24, 0x07	; 7
     c4c:	16 95       	lsr	r17
     c4e:	07 95       	ror	r16
     c50:	f7 94       	ror	r15
     c52:	e7 94       	ror	r14
     c54:	8a 95       	dec	r24
     c56:	d1 f7       	brne	.-12     	; 0xc4c <__pack_f+0x164>
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <__pack_f+0x17c>
     c5a:	ee 24       	eor	r14, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	87 01       	movw	r16, r14
     c60:	ef ef       	ldi	r30, 0xFF	; 255
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	6e 2f       	mov	r22, r30
     c66:	67 95       	ror	r22
     c68:	66 27       	eor	r22, r22
     c6a:	67 95       	ror	r22
     c6c:	90 2f       	mov	r25, r16
     c6e:	9f 77       	andi	r25, 0x7F	; 127
     c70:	d7 94       	ror	r13
     c72:	dd 24       	eor	r13, r13
     c74:	d7 94       	ror	r13
     c76:	8e 2f       	mov	r24, r30
     c78:	86 95       	lsr	r24
     c7a:	49 2f       	mov	r20, r25
     c7c:	46 2b       	or	r20, r22
     c7e:	58 2f       	mov	r21, r24
     c80:	5d 29       	or	r21, r13
     c82:	b7 01       	movw	r22, r14
     c84:	ca 01       	movw	r24, r20
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	08 95       	ret

00000c92 <__unpack_f>:
     c92:	fc 01       	movw	r30, r24
     c94:	db 01       	movw	r26, r22
     c96:	40 81       	ld	r20, Z
     c98:	51 81       	ldd	r21, Z+1	; 0x01
     c9a:	22 81       	ldd	r18, Z+2	; 0x02
     c9c:	62 2f       	mov	r22, r18
     c9e:	6f 77       	andi	r22, 0x7F	; 127
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	22 1f       	adc	r18, r18
     ca4:	22 27       	eor	r18, r18
     ca6:	22 1f       	adc	r18, r18
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	89 2f       	mov	r24, r25
     cac:	88 0f       	add	r24, r24
     cae:	82 2b       	or	r24, r18
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	99 1f       	adc	r25, r25
     cb6:	99 27       	eor	r25, r25
     cb8:	99 1f       	adc	r25, r25
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	9c 93       	st	X, r25
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	a9 f5       	brne	.+106    	; 0xd30 <__unpack_f+0x9e>
     cc6:	41 15       	cp	r20, r1
     cc8:	51 05       	cpc	r21, r1
     cca:	61 05       	cpc	r22, r1
     ccc:	71 05       	cpc	r23, r1
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__unpack_f+0x42>
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	37 c0       	rjmp	.+110    	; 0xd42 <__unpack_f+0xb0>
     cd4:	82 e8       	ldi	r24, 0x82	; 130
     cd6:	9f ef       	ldi	r25, 0xFF	; 255
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	9c 93       	st	X, r25
     cdc:	8e 93       	st	-X, r24
     cde:	12 97       	sbiw	r26, 0x02	; 2
     ce0:	9a 01       	movw	r18, r20
     ce2:	ab 01       	movw	r20, r22
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	44 1f       	adc	r20, r20
     cec:	55 1f       	adc	r21, r21
     cee:	6a 95       	dec	r22
     cf0:	d1 f7       	brne	.-12     	; 0xce6 <__unpack_f+0x54>
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	8c 93       	st	X, r24
     cf6:	0d c0       	rjmp	.+26     	; 0xd12 <__unpack_f+0x80>
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	44 1f       	adc	r20, r20
     cfe:	55 1f       	adc	r21, r21
     d00:	12 96       	adiw	r26, 0x02	; 2
     d02:	8d 91       	ld	r24, X+
     d04:	9c 91       	ld	r25, X
     d06:	13 97       	sbiw	r26, 0x03	; 3
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	13 96       	adiw	r26, 0x03	; 3
     d0c:	9c 93       	st	X, r25
     d0e:	8e 93       	st	-X, r24
     d10:	12 97       	sbiw	r26, 0x02	; 2
     d12:	20 30       	cpi	r18, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	38 07       	cpc	r19, r24
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	48 07       	cpc	r20, r24
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	58 07       	cpc	r21, r24
     d20:	58 f3       	brcs	.-42     	; 0xcf8 <__unpack_f+0x66>
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	2d 93       	st	X+, r18
     d26:	3d 93       	st	X+, r19
     d28:	4d 93       	st	X+, r20
     d2a:	5c 93       	st	X, r21
     d2c:	17 97       	sbiw	r26, 0x07	; 7
     d2e:	08 95       	ret
     d30:	2f 3f       	cpi	r18, 0xFF	; 255
     d32:	31 05       	cpc	r19, r1
     d34:	79 f4       	brne	.+30     	; 0xd54 <__unpack_f+0xc2>
     d36:	41 15       	cp	r20, r1
     d38:	51 05       	cpc	r21, r1
     d3a:	61 05       	cpc	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	19 f4       	brne	.+6      	; 0xd46 <__unpack_f+0xb4>
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	8c 93       	st	X, r24
     d44:	08 95       	ret
     d46:	64 ff       	sbrs	r22, 4
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <__unpack_f+0xbe>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	8c 93       	st	X, r24
     d4e:	12 c0       	rjmp	.+36     	; 0xd74 <__unpack_f+0xe2>
     d50:	1c 92       	st	X, r1
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <__unpack_f+0xe2>
     d54:	2f 57       	subi	r18, 0x7F	; 127
     d56:	30 40       	sbci	r19, 0x00	; 0
     d58:	13 96       	adiw	r26, 0x03	; 3
     d5a:	3c 93       	st	X, r19
     d5c:	2e 93       	st	-X, r18
     d5e:	12 97       	sbiw	r26, 0x02	; 2
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	8c 93       	st	X, r24
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	44 0f       	add	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	66 1f       	adc	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	8a 95       	dec	r24
     d70:	d1 f7       	brne	.-12     	; 0xd66 <__unpack_f+0xd4>
     d72:	70 64       	ori	r23, 0x40	; 64
     d74:	14 96       	adiw	r26, 0x04	; 4
     d76:	4d 93       	st	X+, r20
     d78:	5d 93       	st	X+, r21
     d7a:	6d 93       	st	X+, r22
     d7c:	7c 93       	st	X, r23
     d7e:	17 97       	sbiw	r26, 0x07	; 7
     d80:	08 95       	ret

00000d82 <__fpcmp_parts_f>:
     d82:	1f 93       	push	r17
     d84:	dc 01       	movw	r26, r24
     d86:	fb 01       	movw	r30, r22
     d88:	9c 91       	ld	r25, X
     d8a:	92 30       	cpi	r25, 0x02	; 2
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <__fpcmp_parts_f+0xe>
     d8e:	47 c0       	rjmp	.+142    	; 0xe1e <__fpcmp_parts_f+0x9c>
     d90:	80 81       	ld	r24, Z
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	08 f4       	brcc	.+2      	; 0xd98 <__fpcmp_parts_f+0x16>
     d96:	43 c0       	rjmp	.+134    	; 0xe1e <__fpcmp_parts_f+0x9c>
     d98:	94 30       	cpi	r25, 0x04	; 4
     d9a:	51 f4       	brne	.+20     	; 0xdb0 <__fpcmp_parts_f+0x2e>
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	1c 91       	ld	r17, X
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	99 f5       	brne	.+102    	; 0xe0a <__fpcmp_parts_f+0x88>
     da4:	81 81       	ldd	r24, Z+1	; 0x01
     da6:	68 2f       	mov	r22, r24
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	61 1b       	sub	r22, r17
     dac:	71 09       	sbc	r23, r1
     dae:	3f c0       	rjmp	.+126    	; 0xe2e <__fpcmp_parts_f+0xac>
     db0:	84 30       	cpi	r24, 0x04	; 4
     db2:	21 f0       	breq	.+8      	; 0xdbc <__fpcmp_parts_f+0x3a>
     db4:	92 30       	cpi	r25, 0x02	; 2
     db6:	31 f4       	brne	.+12     	; 0xdc4 <__fpcmp_parts_f+0x42>
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	b9 f1       	breq	.+110    	; 0xe2a <__fpcmp_parts_f+0xa8>
     dbc:	81 81       	ldd	r24, Z+1	; 0x01
     dbe:	88 23       	and	r24, r24
     dc0:	89 f1       	breq	.+98     	; 0xe24 <__fpcmp_parts_f+0xa2>
     dc2:	2d c0       	rjmp	.+90     	; 0xe1e <__fpcmp_parts_f+0x9c>
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	1c 91       	ld	r17, X
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	f1 f0       	breq	.+60     	; 0xe0a <__fpcmp_parts_f+0x88>
     dce:	81 81       	ldd	r24, Z+1	; 0x01
     dd0:	18 17       	cp	r17, r24
     dd2:	d9 f4       	brne	.+54     	; 0xe0a <__fpcmp_parts_f+0x88>
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	2d 91       	ld	r18, X+
     dd8:	3c 91       	ld	r19, X
     dda:	13 97       	sbiw	r26, 0x03	; 3
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	82 17       	cp	r24, r18
     de2:	93 07       	cpc	r25, r19
     de4:	94 f0       	brlt	.+36     	; 0xe0a <__fpcmp_parts_f+0x88>
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	bc f0       	brlt	.+46     	; 0xe1a <__fpcmp_parts_f+0x98>
     dec:	14 96       	adiw	r26, 0x04	; 4
     dee:	8d 91       	ld	r24, X+
     df0:	9d 91       	ld	r25, X+
     df2:	0d 90       	ld	r0, X+
     df4:	bc 91       	ld	r27, X
     df6:	a0 2d       	mov	r26, r0
     df8:	24 81       	ldd	r18, Z+4	; 0x04
     dfa:	35 81       	ldd	r19, Z+5	; 0x05
     dfc:	46 81       	ldd	r20, Z+6	; 0x06
     dfe:	57 81       	ldd	r21, Z+7	; 0x07
     e00:	28 17       	cp	r18, r24
     e02:	39 07       	cpc	r19, r25
     e04:	4a 07       	cpc	r20, r26
     e06:	5b 07       	cpc	r21, r27
     e08:	18 f4       	brcc	.+6      	; 0xe10 <__fpcmp_parts_f+0x8e>
     e0a:	11 23       	and	r17, r17
     e0c:	41 f0       	breq	.+16     	; 0xe1e <__fpcmp_parts_f+0x9c>
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <__fpcmp_parts_f+0xa2>
     e10:	82 17       	cp	r24, r18
     e12:	93 07       	cpc	r25, r19
     e14:	a4 07       	cpc	r26, r20
     e16:	b5 07       	cpc	r27, r21
     e18:	40 f4       	brcc	.+16     	; 0xe2a <__fpcmp_parts_f+0xa8>
     e1a:	11 23       	and	r17, r17
     e1c:	19 f0       	breq	.+6      	; 0xe24 <__fpcmp_parts_f+0xa2>
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <__fpcmp_parts_f+0xac>
     e24:	6f ef       	ldi	r22, 0xFF	; 255
     e26:	7f ef       	ldi	r23, 0xFF	; 255
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <__fpcmp_parts_f+0xac>
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	cb 01       	movw	r24, r22
     e30:	1f 91       	pop	r17
     e32:	08 95       	ret

00000e34 <ADC_Init>:
#include "../BIT_MATH.h"
#include "ADC_interface.h"
#include "ADC_register.h"

void ADC_Init (void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	//enable adc
	SET_BIT(ADCSRA_Reg,7);
     e3c:	aa e7       	ldi	r26, 0x7A	; 122
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ea e7       	ldi	r30, 0x7A	; 122
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	8c 93       	st	X, r24

	// ADC Clock
	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
     e4a:	aa e7       	ldi	r26, 0x7A	; 122
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ea e7       	ldi	r30, 0x7A	; 122
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,1);
     e58:	aa e7       	ldi	r26, 0x7A	; 122
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e7       	ldi	r30, 0x7A	; 122
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,0);
     e66:	aa e7       	ldi	r26, 0x7A	; 122
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e7       	ldi	r30, 0x7A	; 122
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	81 60       	ori	r24, 0x01	; 1
     e72:	8c 93       	st	X, r24

	//V refrence
	SET_BIT(ADMUX_Reg,6);
     e74:	ac e7       	ldi	r26, 0x7C	; 124
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ec e7       	ldi	r30, 0x7C	; 124
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 64       	ori	r24, 0x40	; 64
     e80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_Reg,7);
     e82:	ac e7       	ldi	r26, 0x7C	; 124
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ec e7       	ldi	r30, 0x7C	; 124
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 77       	andi	r24, 0x7F	; 127
     e8e:	8c 93       	st	X, r24

	//Adjustment
	CLR_BIT(ADMUX_Reg,5);
     e90:	ac e7       	ldi	r26, 0x7C	; 124
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ec e7       	ldi	r30, 0x7C	; 124
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	8c 93       	st	X, r24

}
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <ADC_Read>:

u16 ADC_Read (u8 Channel)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
	//u16 ADCH;
	//u16 ADCL;
	//u16 ADC;

	//channel select
	ADMUX_Reg &= (~(0x1F));
     eb0:	ac e7       	ldi	r26, 0x7C	; 124
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ec e7       	ldi	r30, 0x7C	; 124
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 7e       	andi	r24, 0xE0	; 224
     ebc:	8c 93       	st	X, r24
	ADMUX_Reg |= Channel;
     ebe:	ac e7       	ldi	r26, 0x7C	; 124
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ec e7       	ldi	r30, 0x7C	; 124
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	90 81       	ld	r25, Z
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	89 2b       	or	r24, r25
     ecc:	8c 93       	st	X, r24

	//start conversion
	SET_BIT(ADCSRA_Reg,6);
     ece:	aa e7       	ldi	r26, 0x7A	; 122
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e7       	ldi	r30, 0x7A	; 122
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24

	//wait till flag is raised
	while(!GET_BIT(ADCSRA_Reg,4));
     edc:	ea e7       	ldi	r30, 0x7A	; 122
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	82 95       	swap	r24
     ee4:	8f 70       	andi	r24, 0x0F	; 15
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	90 70       	andi	r25, 0x00	; 0
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	a9 f3       	breq	.-22     	; 0xedc <ADC_Read+0x38>
	//ADCL=ADCL_Reg;
	//ADCH=ADCH_Reg;
	//ADC = ADCH<<8 | ADCL;

	//CLEAR ACDIF flag
	SET_BIT(ADCSRA_Reg,4);
     ef2:	aa e7       	ldi	r26, 0x7A	; 122
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ea e7       	ldi	r30, 0x7A	; 122
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	8c 93       	st	X, r24

	//return ADC reading
	return ADC_Reg;
     f00:	e8 e7       	ldi	r30, 0x78	; 120
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01

}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <Mappping>:

u32 Mappping (u32 Range1_min,u32 Range1_max,u32 Range1_input,u32 Range2_min,u32 Range2_max){
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	64 97       	sbiw	r28, 0x14	; 20
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	6d 83       	std	Y+5, r22	; 0x05
     f36:	7e 83       	std	Y+6, r23	; 0x06
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	98 87       	std	Y+8, r25	; 0x08
     f3c:	29 87       	std	Y+9, r18	; 0x09
     f3e:	3a 87       	std	Y+10, r19	; 0x0a
     f40:	4b 87       	std	Y+11, r20	; 0x0b
     f42:	5c 87       	std	Y+12, r21	; 0x0c
     f44:	ed 86       	std	Y+13, r14	; 0x0d
     f46:	fe 86       	std	Y+14, r15	; 0x0e
     f48:	0f 87       	std	Y+15, r16	; 0x0f
     f4a:	18 8b       	std	Y+16, r17	; 0x10
     f4c:	a9 8a       	std	Y+17, r10	; 0x11
     f4e:	ba 8a       	std	Y+18, r11	; 0x12
     f50:	cb 8a       	std	Y+19, r12	; 0x13
     f52:	dc 8a       	std	Y+20, r13	; 0x14

	u32 Range2_output=Range2_max-(((Range1_max-Range1_input)*(Range2_max-Range2_min))/(Range1_max-Range1_min));
     f54:	29 85       	ldd	r18, Y+9	; 0x09
     f56:	3a 85       	ldd	r19, Y+10	; 0x0a
     f58:	4b 85       	ldd	r20, Y+11	; 0x0b
     f5a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	af 85       	ldd	r26, Y+15	; 0x0f
     f62:	b8 89       	ldd	r27, Y+16	; 0x10
     f64:	79 01       	movw	r14, r18
     f66:	8a 01       	movw	r16, r20
     f68:	e8 1a       	sub	r14, r24
     f6a:	f9 0a       	sbc	r15, r25
     f6c:	0a 0b       	sbc	r16, r26
     f6e:	1b 0b       	sbc	r17, r27
     f70:	29 a1       	ldd	r18, Y+33	; 0x21
     f72:	3a a1       	ldd	r19, Y+34	; 0x22
     f74:	4b a1       	ldd	r20, Y+35	; 0x23
     f76:	5c a1       	ldd	r21, Y+36	; 0x24
     f78:	89 89       	ldd	r24, Y+17	; 0x11
     f7a:	9a 89       	ldd	r25, Y+18	; 0x12
     f7c:	ab 89       	ldd	r26, Y+19	; 0x13
     f7e:	bc 89       	ldd	r27, Y+20	; 0x14
     f80:	28 1b       	sub	r18, r24
     f82:	39 0b       	sbc	r19, r25
     f84:	4a 0b       	sbc	r20, r26
     f86:	5b 0b       	sbc	r21, r27
     f88:	c8 01       	movw	r24, r16
     f8a:	b7 01       	movw	r22, r14
     f8c:	0e 94 ef 13 	call	0x27de	; 0x27de <__mulsi3>
     f90:	7b 01       	movw	r14, r22
     f92:	8c 01       	movw	r16, r24
     f94:	29 85       	ldd	r18, Y+9	; 0x09
     f96:	3a 85       	ldd	r19, Y+10	; 0x0a
     f98:	4b 85       	ldd	r20, Y+11	; 0x0b
     f9a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	af 81       	ldd	r26, Y+7	; 0x07
     fa2:	b8 85       	ldd	r27, Y+8	; 0x08
     fa4:	28 1b       	sub	r18, r24
     fa6:	39 0b       	sbc	r19, r25
     fa8:	4a 0b       	sbc	r20, r26
     faa:	5b 0b       	sbc	r21, r27
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodsi4>
     fb4:	da 01       	movw	r26, r20
     fb6:	c9 01       	movw	r24, r18
     fb8:	9c 01       	movw	r18, r24
     fba:	ad 01       	movw	r20, r26
     fbc:	89 a1       	ldd	r24, Y+33	; 0x21
     fbe:	9a a1       	ldd	r25, Y+34	; 0x22
     fc0:	ab a1       	ldd	r26, Y+35	; 0x23
     fc2:	bc a1       	ldd	r27, Y+36	; 0x24
     fc4:	82 1b       	sub	r24, r18
     fc6:	93 0b       	sbc	r25, r19
     fc8:	a4 0b       	sbc	r26, r20
     fca:	b5 0b       	sbc	r27, r21
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	ab 83       	std	Y+3, r26	; 0x03
     fd2:	bc 83       	std	Y+4, r27	; 0x04

	return Range2_output;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	ab 81       	ldd	r26, Y+3	; 0x03
     fda:	bc 81       	ldd	r27, Y+4	; 0x04


}
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	64 96       	adiw	r28, 0x14	; 20
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	08 95       	ret

00001002 <DIO_SetPinValue>:
#include "../BIT_MATH.h"
#include "DIO_register.h"
#include "DIO_interface.h"

void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinValCopy)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	27 97       	sbiw	r28, 0x07	; 7
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	6a 83       	std	Y+2, r22	; 0x02
    101a:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <DIO_SetPinValue+0x22>
    1022:	26 c1       	rjmp	.+588    	; 0x1270 <__stack+0x171>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	08 f0       	brcs	.+2      	; 0x102c <DIO_SetPinValue+0x2a>
    102a:	22 c1       	rjmp	.+580    	; 0x1270 <__stack+0x171>
	{
		if ( u8PinValCopy == PIN_HIGH )
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	09 f0       	breq	.+2      	; 0x1034 <DIO_SetPinValue+0x32>
    1032:	8b c0       	rjmp	.+278    	; 0x114a <__stack+0x4b>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3f 83       	std	Y+7, r19	; 0x07
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <DIO_SetPinValue+0x48>
    1048:	44 c0       	rjmp	.+136    	; 0x10d2 <DIO_SetPinValue+0xd0>
    104a:	2e 81       	ldd	r18, Y+6	; 0x06
    104c:	3f 81       	ldd	r19, Y+7	; 0x07
    104e:	23 30       	cpi	r18, 0x03	; 3
    1050:	31 05       	cpc	r19, r1
    1052:	54 f4       	brge	.+20     	; 0x1068 <DIO_SetPinValue+0x66>
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	99 f0       	breq	.+38     	; 0x1082 <DIO_SetPinValue+0x80>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	21 30       	cpi	r18, 0x01	; 1
    1062:	31 05       	cpc	r19, r1
    1064:	11 f1       	breq	.+68     	; 0x10aa <DIO_SetPinValue+0xa8>
    1066:	04 c1       	rjmp	.+520    	; 0x1270 <__stack+0x171>
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	9f 81       	ldd	r25, Y+7	; 0x07
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <DIO_SetPinValue+0x72>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <DIO_SetPinValue+0xf8>
    1074:	2e 81       	ldd	r18, Y+6	; 0x06
    1076:	3f 81       	ldd	r19, Y+7	; 0x07
    1078:	24 30       	cpi	r18, 0x04	; 4
    107a:	31 05       	cpc	r19, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <DIO_SetPinValue+0x7e>
    107e:	51 c0       	rjmp	.+162    	; 0x1122 <__stack+0x23>
    1080:	f7 c0       	rjmp	.+494    	; 0x1270 <__stack+0x171>
			{
			case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    1082:	ab e3       	ldi	r26, 0x3B	; 59
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e3       	ldi	r30, 0x3B	; 59
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_SetPinValue+0x9e>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_SetPinValue+0x9a>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	e3 c0       	rjmp	.+454    	; 0x1270 <__stack+0x171>
			case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    10aa:	a8 e3       	ldi	r26, 0x38	; 56
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e8 e3       	ldi	r30, 0x38	; 56
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_SetPinValue+0xc6>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_SetPinValue+0xc2>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	cf c0       	rjmp	.+414    	; 0x1270 <__stack+0x171>
			case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    10d2:	a5 e3       	ldi	r26, 0x35	; 53
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e3       	ldi	r30, 0x35	; 53
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinValue+0xee>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinValue+0xea>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	bb c0       	rjmp	.+374    	; 0x1270 <__stack+0x171>
			case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    10fa:	a2 e3       	ldi	r26, 0x32	; 50
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e2 e3       	ldi	r30, 0x32	; 50
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <__stack+0x19>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <__stack+0x15>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	a7 c0       	rjmp	.+334    	; 0x1270 <__stack+0x171>
			case PORTE: SET_BIT(PORTE_Register,u8PinIdCopy); break;
    1122:	a3 e2       	ldi	r26, 0x23	; 35
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e3 e2       	ldi	r30, 0x23	; 35
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__stack+0x41>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <__stack+0x3d>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	93 c0       	rjmp	.+294    	; 0x1270 <__stack+0x171>
		    default : break;
			}
		}

		else if ( u8PinValCopy == PIN_LOW )
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 23       	and	r24, r24
    114e:	09 f0       	breq	.+2      	; 0x1152 <__stack+0x53>
    1150:	8f c0       	rjmp	.+286    	; 0x1270 <__stack+0x171>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3d 83       	std	Y+5, r19	; 0x05
    115a:	2c 83       	std	Y+4, r18	; 0x04
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <__stack+0x69>
    1166:	46 c0       	rjmp	.+140    	; 0x11f4 <__stack+0xf5>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	23 30       	cpi	r18, 0x03	; 3
    116e:	31 05       	cpc	r19, r1
    1170:	54 f4       	brge	.+20     	; 0x1186 <__stack+0x87>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	99 f0       	breq	.+38     	; 0x11a0 <__stack+0xa1>
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	3d 81       	ldd	r19, Y+5	; 0x05
    117e:	21 30       	cpi	r18, 0x01	; 1
    1180:	31 05       	cpc	r19, r1
    1182:	19 f1       	breq	.+70     	; 0x11ca <__stack+0xcb>
    1184:	75 c0       	rjmp	.+234    	; 0x1270 <__stack+0x171>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <__stack+0x93>
    1190:	46 c0       	rjmp	.+140    	; 0x121e <__stack+0x11f>
    1192:	2c 81       	ldd	r18, Y+4	; 0x04
    1194:	3d 81       	ldd	r19, Y+5	; 0x05
    1196:	24 30       	cpi	r18, 0x04	; 4
    1198:	31 05       	cpc	r19, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <__stack+0x9f>
    119c:	55 c0       	rjmp	.+170    	; 0x1248 <__stack+0x149>
    119e:	68 c0       	rjmp	.+208    	; 0x1270 <__stack+0x171>
			{
			case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    11a0:	ab e3       	ldi	r26, 0x3B	; 59
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <__stack+0xbf>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <__stack+0xbb>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	53 c0       	rjmp	.+166    	; 0x1270 <__stack+0x171>
			case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <__stack+0xe9>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <__stack+0xe5>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	3e c0       	rjmp	.+124    	; 0x1270 <__stack+0x171>
			case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    11f4:	a5 e3       	ldi	r26, 0x35	; 53
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e3       	ldi	r30, 0x35	; 53
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <__stack+0x113>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <__stack+0x10f>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	29 c0       	rjmp	.+82     	; 0x1270 <__stack+0x171>
			case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <__stack+0x13d>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <__stack+0x139>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <__stack+0x171>
			case PORTE: CLR_BIT(PORTE_Register,u8PinIdCopy); break;
    1248:	a3 e2       	ldi	r26, 0x23	; 35
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e2       	ldi	r30, 0x23	; 35
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__stack+0x167>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <__stack+0x163>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
		{
			/* Do nothing, Wrong Direction Required */
		}
	}

}
    1270:	27 96       	adiw	r28, 0x07	; 7
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_GetPinValue+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_GetPinValue+0x8>
    128a:	0f 92       	push	r0
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Valuecopy;

	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_GetPinValue+0x1a>
    129a:	85 c0       	rjmp	.+266    	; 0x13a6 <DIO_GetPinValue+0x124>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 30       	cpi	r24, 0x08	; 8
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <DIO_GetPinValue+0x22>
    12a2:	81 c0       	rjmp	.+258    	; 0x13a6 <DIO_GetPinValue+0x124>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3d 83       	std	Y+5, r19	; 0x05
    12ac:	2c 83       	std	Y+4, r18	; 0x04
    12ae:	4c 81       	ldd	r20, Y+4	; 0x04
    12b0:	5d 81       	ldd	r21, Y+5	; 0x05
    12b2:	42 30       	cpi	r20, 0x02	; 2
    12b4:	51 05       	cpc	r21, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <DIO_GetPinValue+0x38>
    12b8:	41 c0       	rjmp	.+130    	; 0x133c <DIO_GetPinValue+0xba>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	5c f4       	brge	.+22     	; 0x12da <DIO_GetPinValue+0x58>
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	99 f0       	breq	.+38     	; 0x12f4 <DIO_GetPinValue+0x72>
    12ce:	4c 81       	ldd	r20, Y+4	; 0x04
    12d0:	5d 81       	ldd	r21, Y+5	; 0x05
    12d2:	41 30       	cpi	r20, 0x01	; 1
    12d4:	51 05       	cpc	r21, r1
    12d6:	01 f1       	breq	.+64     	; 0x1318 <DIO_GetPinValue+0x96>
    12d8:	66 c0       	rjmp	.+204    	; 0x13a6 <DIO_GetPinValue+0x124>
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <DIO_GetPinValue+0x64>
    12e4:	3d c0       	rjmp	.+122    	; 0x1360 <DIO_GetPinValue+0xde>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	24 30       	cpi	r18, 0x04	; 4
    12ec:	31 05       	cpc	r19, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <DIO_GetPinValue+0x70>
    12f0:	49 c0       	rjmp	.+146    	; 0x1384 <DIO_GetPinValue+0x102>
    12f2:	59 c0       	rjmp	.+178    	; 0x13a6 <DIO_GetPinValue+0x124>
		{
		case PORTA: u8Valuecopy = GET_BIT(PINA_Register,u8PinIdCopy); break;
    12f4:	e9 e3       	ldi	r30, 0x39	; 57
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a9 01       	movw	r20, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_GetPinValue+0x8a>
    1308:	55 95       	asr	r21
    130a:	47 95       	ror	r20
    130c:	8a 95       	dec	r24
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_GetPinValue+0x86>
    1310:	ca 01       	movw	r24, r20
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	47 c0       	rjmp	.+142    	; 0x13a6 <DIO_GetPinValue+0x124>
		case PORTB: u8Valuecopy = GET_BIT(PINB_Register,u8PinIdCopy); break;
    1318:	e6 e3       	ldi	r30, 0x36	; 54
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_GetPinValue+0xae>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_GetPinValue+0xaa>
    1334:	ca 01       	movw	r24, r20
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	35 c0       	rjmp	.+106    	; 0x13a6 <DIO_GetPinValue+0x124>
		case PORTC: u8Valuecopy = GET_BIT(PINC_Register,u8PinIdCopy); break;
    133c:	e3 e3       	ldi	r30, 0x33	; 51
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_GetPinValue+0xd2>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_GetPinValue+0xce>
    1358:	ca 01       	movw	r24, r20
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	23 c0       	rjmp	.+70     	; 0x13a6 <DIO_GetPinValue+0x124>
		case PORTD: u8Valuecopy = GET_BIT(PIND_Register,u8PinIdCopy); break;
    1360:	e0 e3       	ldi	r30, 0x30	; 48
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_GetPinValue+0xf6>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_GetPinValue+0xf2>
    137c:	ca 01       	movw	r24, r20
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	11 c0       	rjmp	.+34     	; 0x13a6 <DIO_GetPinValue+0x124>
		case PORTE: u8Valuecopy = GET_BIT(PINE_Register,u8PinIdCopy); break;
    1384:	e1 e2       	ldi	r30, 0x21	; 33
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_GetPinValue+0x11a>
    1398:	55 95       	asr	r21
    139a:	47 95       	ror	r20
    139c:	8a 95       	dec	r24
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_GetPinValue+0x116>
    13a0:	ca 01       	movw	r24, r20
    13a2:	81 70       	andi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing, Wrong Direction Required */
	}

	return u8Valuecopy;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinDirCopy)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	27 97       	sbiw	r28, 0x07	; 7
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
    13d0:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	08 f0       	brcs	.+2      	; 0x13da <DIO_SetPinDirection+0x22>
    13d8:	26 c1       	rjmp	.+588    	; 0x1626 <DIO_SetPinDirection+0x26e>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <DIO_SetPinDirection+0x2a>
    13e0:	22 c1       	rjmp	.+580    	; 0x1626 <DIO_SetPinDirection+0x26e>
	{
		if ( u8PinDirCopy == PIN_OUTPUT )
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <DIO_SetPinDirection+0x32>
    13e8:	8b c0       	rjmp	.+278    	; 0x1500 <DIO_SetPinDirection+0x148>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3f 83       	std	Y+7, r19	; 0x07
    13f2:	2e 83       	std	Y+6, r18	; 0x06
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_SetPinDirection+0x48>
    13fe:	44 c0       	rjmp	.+136    	; 0x1488 <DIO_SetPinDirection+0xd0>
    1400:	2e 81       	ldd	r18, Y+6	; 0x06
    1402:	3f 81       	ldd	r19, Y+7	; 0x07
    1404:	23 30       	cpi	r18, 0x03	; 3
    1406:	31 05       	cpc	r19, r1
    1408:	54 f4       	brge	.+20     	; 0x141e <DIO_SetPinDirection+0x66>
    140a:	8e 81       	ldd	r24, Y+6	; 0x06
    140c:	9f 81       	ldd	r25, Y+7	; 0x07
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	99 f0       	breq	.+38     	; 0x1438 <DIO_SetPinDirection+0x80>
    1412:	2e 81       	ldd	r18, Y+6	; 0x06
    1414:	3f 81       	ldd	r19, Y+7	; 0x07
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	31 05       	cpc	r19, r1
    141a:	11 f1       	breq	.+68     	; 0x1460 <DIO_SetPinDirection+0xa8>
    141c:	04 c1       	rjmp	.+520    	; 0x1626 <DIO_SetPinDirection+0x26e>
    141e:	8e 81       	ldd	r24, Y+6	; 0x06
    1420:	9f 81       	ldd	r25, Y+7	; 0x07
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <DIO_SetPinDirection+0x72>
    1428:	43 c0       	rjmp	.+134    	; 0x14b0 <DIO_SetPinDirection+0xf8>
    142a:	2e 81       	ldd	r18, Y+6	; 0x06
    142c:	3f 81       	ldd	r19, Y+7	; 0x07
    142e:	24 30       	cpi	r18, 0x04	; 4
    1430:	31 05       	cpc	r19, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <DIO_SetPinDirection+0x7e>
    1434:	51 c0       	rjmp	.+162    	; 0x14d8 <DIO_SetPinDirection+0x120>
    1436:	f7 c0       	rjmp	.+494    	; 0x1626 <DIO_SetPinDirection+0x26e>
			{
			case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_SetPinDirection+0x9e>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_SetPinDirection+0x9a>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	e3 c0       	rjmp	.+454    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    1460:	a7 e3       	ldi	r26, 0x37	; 55
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_SetPinDirection+0xc6>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_SetPinDirection+0xc2>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	cf c0       	rjmp	.+414    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    1488:	a4 e3       	ldi	r26, 0x34	; 52
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_SetPinDirection+0xee>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_SetPinDirection+0xea>
    14aa:	84 2b       	or	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	bb c0       	rjmp	.+374    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    14b0:	a1 e3       	ldi	r26, 0x31	; 49
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_SetPinDirection+0x116>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_SetPinDirection+0x112>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	a7 c0       	rjmp	.+334    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTE: SET_BIT(DDRE_Register,u8PinIdCopy); break;
    14d8:	a2 e2       	ldi	r26, 0x22	; 34
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e2       	ldi	r30, 0x22	; 34
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_SetPinDirection+0x13e>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_SetPinDirection+0x13a>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	93 c0       	rjmp	.+294    	; 0x1626 <DIO_SetPinDirection+0x26e>
			default : break;
			}
		}

		else if ( u8PinDirCopy == PIN_INPUT )
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_SetPinDirection+0x150>
    1506:	8f c0       	rjmp	.+286    	; 0x1626 <DIO_SetPinDirection+0x26e>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <DIO_SetPinDirection+0x166>
    151c:	46 c0       	rjmp	.+140    	; 0x15aa <DIO_SetPinDirection+0x1f2>
    151e:	2c 81       	ldd	r18, Y+4	; 0x04
    1520:	3d 81       	ldd	r19, Y+5	; 0x05
    1522:	23 30       	cpi	r18, 0x03	; 3
    1524:	31 05       	cpc	r19, r1
    1526:	54 f4       	brge	.+20     	; 0x153c <DIO_SetPinDirection+0x184>
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	99 f0       	breq	.+38     	; 0x1556 <DIO_SetPinDirection+0x19e>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	21 30       	cpi	r18, 0x01	; 1
    1536:	31 05       	cpc	r19, r1
    1538:	19 f1       	breq	.+70     	; 0x1580 <DIO_SetPinDirection+0x1c8>
    153a:	75 c0       	rjmp	.+234    	; 0x1626 <DIO_SetPinDirection+0x26e>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <DIO_SetPinDirection+0x190>
    1546:	46 c0       	rjmp	.+140    	; 0x15d4 <DIO_SetPinDirection+0x21c>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	24 30       	cpi	r18, 0x04	; 4
    154e:	31 05       	cpc	r19, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <DIO_SetPinDirection+0x19c>
    1552:	55 c0       	rjmp	.+170    	; 0x15fe <DIO_SetPinDirection+0x246>
    1554:	68 c0       	rjmp	.+208    	; 0x1626 <DIO_SetPinDirection+0x26e>
			{
			case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    1556:	aa e3       	ldi	r26, 0x3A	; 58
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_SetPinDirection+0x1bc>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_SetPinDirection+0x1b8>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	53 c0       	rjmp	.+166    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1580:	a7 e3       	ldi	r26, 0x37	; 55
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e7 e3       	ldi	r30, 0x37	; 55
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_SetPinDirection+0x1e6>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_SetPinDirection+0x1e2>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	3e c0       	rjmp	.+124    	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_SetPinDirection+0x210>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_SetPinDirection+0x20c>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	29 c0       	rjmp	.+82     	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    15d4:	a1 e3       	ldi	r26, 0x31	; 49
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e1 e3       	ldi	r30, 0x31	; 49
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_SetPinDirection+0x23a>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_SetPinDirection+0x236>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <DIO_SetPinDirection+0x26e>
			case PORTE: CLR_BIT(DDRE_Register,u8PinIdCopy); break;
    15fe:	a2 e2       	ldi	r26, 0x22	; 34
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e2 e2       	ldi	r30, 0x22	; 34
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_SetPinDirection+0x264>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_SetPinDirection+0x260>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
		{
			/* Do nothing, Wrong Direction Required */
		}
	}

}
    1626:	27 96       	adiw	r28, 0x07	; 7
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_TogglePinValue>:
void DIO_TogglePinValue(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_TogglePinValue+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_TogglePinValue+0x8>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	08 f0       	brcs	.+2      	; 0x1650 <DIO_TogglePinValue+0x18>
    164e:	8e c0       	rjmp	.+284    	; 0x176c <DIO_TogglePinValue+0x134>
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_TogglePinValue+0x20>
    1656:	8a c0       	rjmp	.+276    	; 0x176c <DIO_TogglePinValue+0x134>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3c 83       	std	Y+4, r19	; 0x04
    1660:	2b 83       	std	Y+3, r18	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <DIO_TogglePinValue+0x36>
    166c:	44 c0       	rjmp	.+136    	; 0x16f6 <DIO_TogglePinValue+0xbe>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	23 30       	cpi	r18, 0x03	; 3
    1674:	31 05       	cpc	r19, r1
    1676:	54 f4       	brge	.+20     	; 0x168c <DIO_TogglePinValue+0x54>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	99 f0       	breq	.+38     	; 0x16a6 <DIO_TogglePinValue+0x6e>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	31 05       	cpc	r19, r1
    1688:	11 f1       	breq	.+68     	; 0x16ce <DIO_TogglePinValue+0x96>
    168a:	70 c0       	rjmp	.+224    	; 0x176c <DIO_TogglePinValue+0x134>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_TogglePinValue+0x60>
    1696:	43 c0       	rjmp	.+134    	; 0x171e <DIO_TogglePinValue+0xe6>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	24 30       	cpi	r18, 0x04	; 4
    169e:	31 05       	cpc	r19, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <DIO_TogglePinValue+0x6c>
    16a2:	51 c0       	rjmp	.+162    	; 0x1746 <DIO_TogglePinValue+0x10e>
    16a4:	63 c0       	rjmp	.+198    	; 0x176c <DIO_TogglePinValue+0x134>
		{
		case PORTA: TOG_BIT(PORTA_Register,u8PinIdCopy); break;
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_TogglePinValue+0x8c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_TogglePinValue+0x88>
    16c8:	84 27       	eor	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	4f c0       	rjmp	.+158    	; 0x176c <DIO_TogglePinValue+0x134>
		case PORTB: TOG_BIT(PORTB_Register,u8PinIdCopy); break;
    16ce:	a8 e3       	ldi	r26, 0x38	; 56
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_TogglePinValue+0xb4>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_TogglePinValue+0xb0>
    16f0:	84 27       	eor	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	3b c0       	rjmp	.+118    	; 0x176c <DIO_TogglePinValue+0x134>
		case PORTC: TOG_BIT(PORTC_Register,u8PinIdCopy); break;
    16f6:	a5 e3       	ldi	r26, 0x35	; 53
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e3       	ldi	r30, 0x35	; 53
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_TogglePinValue+0xdc>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_TogglePinValue+0xd8>
    1718:	84 27       	eor	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	27 c0       	rjmp	.+78     	; 0x176c <DIO_TogglePinValue+0x134>
		case PORTD: TOG_BIT(PORTD_Register,u8PinIdCopy); break;
    171e:	a2 e3       	ldi	r26, 0x32	; 50
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_TogglePinValue+0x104>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_TogglePinValue+0x100>
    1740:	84 27       	eor	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	13 c0       	rjmp	.+38     	; 0x176c <DIO_TogglePinValue+0x134>
		case PORTE: TOG_BIT(PORTE_Register,u8PinIdCopy); break;
    1746:	a3 e2       	ldi	r26, 0x23	; 35
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e3 e2       	ldi	r30, 0x23	; 35
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_TogglePinValue+0x12c>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_TogglePinValue+0x128>
    1768:	84 27       	eor	r24, r20
    176a:	8c 93       	st	X, r24
	}
	else
	{
		/* Do nothing, Wrong Direction Required */
	}
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <DIO_SetPortDirection>:

/* IO Ports */
void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_SetPortDirection+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_SetPortDirection+0x8>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3c 83       	std	Y+4, r19	; 0x04
    1792:	2b 83       	std	Y+3, r18	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	91 05       	cpc	r25, r1
    179c:	21 f1       	breq	.+72     	; 0x17e6 <DIO_SetPortDirection+0x6c>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	23 30       	cpi	r18, 0x03	; 3
    17a4:	31 05       	cpc	r19, r1
    17a6:	54 f4       	brge	.+20     	; 0x17bc <DIO_SetPortDirection+0x42>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	89 f0       	breq	.+34     	; 0x17d2 <DIO_SetPortDirection+0x58>
    17b0:	2b 81       	ldd	r18, Y+3	; 0x03
    17b2:	3c 81       	ldd	r19, Y+4	; 0x04
    17b4:	21 30       	cpi	r18, 0x01	; 1
    17b6:	31 05       	cpc	r19, r1
    17b8:	89 f0       	breq	.+34     	; 0x17dc <DIO_SetPortDirection+0x62>
    17ba:	23 c0       	rjmp	.+70     	; 0x1802 <DIO_SetPortDirection+0x88>
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	a9 f0       	breq	.+42     	; 0x17f0 <DIO_SetPortDirection+0x76>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	24 30       	cpi	r18, 0x04	; 4
    17cc:	31 05       	cpc	r19, r1
    17ce:	a9 f0       	breq	.+42     	; 0x17fa <DIO_SetPortDirection+0x80>
    17d0:	18 c0       	rjmp	.+48     	; 0x1802 <DIO_SetPortDirection+0x88>
	{
	case PORTA : DDRA_Register = u8PortDirCopy; break;
    17d2:	ea e3       	ldi	r30, 0x3A	; 58
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 83       	st	Z, r24
    17da:	13 c0       	rjmp	.+38     	; 0x1802 <DIO_SetPortDirection+0x88>
	case PORTB : DDRB_Register = u8PortDirCopy; break;
    17dc:	e7 e3       	ldi	r30, 0x37	; 55
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	80 83       	st	Z, r24
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <DIO_SetPortDirection+0x88>
	case PORTC : DDRC_Register = u8PortDirCopy; break;
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	80 83       	st	Z, r24
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <DIO_SetPortDirection+0x88>
	case PORTD : DDRD_Register = u8PortDirCopy; break;
    17f0:	e1 e3       	ldi	r30, 0x31	; 49
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	80 83       	st	Z, r24
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <DIO_SetPortDirection+0x88>
	case PORTE : DDRE_Register = u8PortDirCopy; break;
    17fa:	e2 e2       	ldi	r30, 0x22	; 34
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
	default: break;
	}

}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_SetPortValue>:
void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_SetPortValue+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <DIO_SetPortValue+0x8>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3c 83       	std	Y+4, r19	; 0x04
    1828:	2b 83       	std	Y+3, r18	; 0x03
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	91 05       	cpc	r25, r1
    1832:	21 f1       	breq	.+72     	; 0x187c <DIO_SetPortValue+0x6c>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	31 05       	cpc	r19, r1
    183c:	54 f4       	brge	.+20     	; 0x1852 <DIO_SetPortValue+0x42>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	89 f0       	breq	.+34     	; 0x1868 <DIO_SetPortValue+0x58>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	21 30       	cpi	r18, 0x01	; 1
    184c:	31 05       	cpc	r19, r1
    184e:	89 f0       	breq	.+34     	; 0x1872 <DIO_SetPortValue+0x62>
    1850:	23 c0       	rjmp	.+70     	; 0x1898 <DIO_SetPortValue+0x88>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	a9 f0       	breq	.+42     	; 0x1886 <DIO_SetPortValue+0x76>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	24 30       	cpi	r18, 0x04	; 4
    1862:	31 05       	cpc	r19, r1
    1864:	a9 f0       	breq	.+42     	; 0x1890 <DIO_SetPortValue+0x80>
    1866:	18 c0       	rjmp	.+48     	; 0x1898 <DIO_SetPortValue+0x88>
	{
	case PORTA : PORTA_Register = u8PortValCopy; break;
    1868:	eb e3       	ldi	r30, 0x3B	; 59
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <DIO_SetPortValue+0x88>
	case PORTB : PORTB_Register = u8PortValCopy; break;
    1872:	e8 e3       	ldi	r30, 0x38	; 56
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <DIO_SetPortValue+0x88>
	case PORTC : PORTC_Register = u8PortValCopy; break;
    187c:	e5 e3       	ldi	r30, 0x35	; 53
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <DIO_SetPortValue+0x88>
	case PORTD : PORTD_Register = u8PortValCopy; break;
    1886:	e2 e3       	ldi	r30, 0x32	; 50
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <DIO_SetPortValue+0x88>
	case PORTE : PORTE_Register = u8PortValCopy; break;
    1890:	e3 e2       	ldi	r30, 0x23	; 35
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 83       	st	Z, r24
	default: break;
	}


}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <DIO_TogglePortValue>:
void DIO_TogglePortValue(u8 u8PortIdCopy)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <DIO_TogglePortValue+0x6>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
	switch(u8PortIdCopy)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3b 83       	std	Y+3, r19	; 0x03
    18bc:	2a 83       	std	Y+2, r18	; 0x02
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	91 05       	cpc	r25, r1
    18c6:	51 f1       	breq	.+84     	; 0x191c <DIO_TogglePortValue+0x76>
    18c8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ca:	3b 81       	ldd	r19, Y+3	; 0x03
    18cc:	23 30       	cpi	r18, 0x03	; 3
    18ce:	31 05       	cpc	r19, r1
    18d0:	54 f4       	brge	.+20     	; 0x18e6 <DIO_TogglePortValue+0x40>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	89 f0       	breq	.+34     	; 0x18fc <DIO_TogglePortValue+0x56>
    18da:	2a 81       	ldd	r18, Y+2	; 0x02
    18dc:	3b 81       	ldd	r19, Y+3	; 0x03
    18de:	21 30       	cpi	r18, 0x01	; 1
    18e0:	31 05       	cpc	r19, r1
    18e2:	a1 f0       	breq	.+40     	; 0x190c <DIO_TogglePortValue+0x66>
    18e4:	32 c0       	rjmp	.+100    	; 0x194a <DIO_TogglePortValue+0xa4>
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	f1 f0       	breq	.+60     	; 0x192c <DIO_TogglePortValue+0x86>
    18f0:	2a 81       	ldd	r18, Y+2	; 0x02
    18f2:	3b 81       	ldd	r19, Y+3	; 0x03
    18f4:	24 30       	cpi	r18, 0x04	; 4
    18f6:	31 05       	cpc	r19, r1
    18f8:	09 f1       	breq	.+66     	; 0x193c <DIO_TogglePortValue+0x96>
    18fa:	27 c0       	rjmp	.+78     	; 0x194a <DIO_TogglePortValue+0xa4>
	{
	case PORTA : PORTA_Register ^= 0xFF; break;
    18fc:	ab e3       	ldi	r26, 0x3B	; 59
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	eb e3       	ldi	r30, 0x3B	; 59
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 95       	com	r24
    1908:	8c 93       	st	X, r24
    190a:	1f c0       	rjmp	.+62     	; 0x194a <DIO_TogglePortValue+0xa4>
	case PORTB : PORTB_Register ^= 0xFF; break;
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 95       	com	r24
    1918:	8c 93       	st	X, r24
    191a:	17 c0       	rjmp	.+46     	; 0x194a <DIO_TogglePortValue+0xa4>
	case PORTC : PORTC_Register ^= 0xFF; break;
    191c:	a5 e3       	ldi	r26, 0x35	; 53
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e3       	ldi	r30, 0x35	; 53
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 95       	com	r24
    1928:	8c 93       	st	X, r24
    192a:	0f c0       	rjmp	.+30     	; 0x194a <DIO_TogglePortValue+0xa4>
	case PORTD : PORTD_Register ^= 0xFF; break;
    192c:	a2 e3       	ldi	r26, 0x32	; 50
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e2 e3       	ldi	r30, 0x32	; 50
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 95       	com	r24
    1938:	8c 93       	st	X, r24
    193a:	07 c0       	rjmp	.+14     	; 0x194a <DIO_TogglePortValue+0xa4>
	case PORTE : PORTE_Register ^= 0xFF; break;
    193c:	a3 e2       	ldi	r26, 0x23	; 35
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e3 e2       	ldi	r30, 0x23	; 35
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 95       	com	r24
    1948:	8c 93       	st	X, r24
	default: break;
	}

}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 u8PortIdCopy)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <DIO_GetPortValue+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <DIO_GetPortValue+0x8>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8Valuecopy;

	switch(u8PortIdCopy)
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	3c 83       	std	Y+4, r19	; 0x04
    196c:	2b 83       	std	Y+3, r18	; 0x03
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	91 05       	cpc	r25, r1
    1976:	21 f1       	breq	.+72     	; 0x19c0 <DIO_GetPortValue+0x6a>
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	23 30       	cpi	r18, 0x03	; 3
    197e:	31 05       	cpc	r19, r1
    1980:	54 f4       	brge	.+20     	; 0x1996 <DIO_GetPortValue+0x40>
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	89 f0       	breq	.+34     	; 0x19ac <DIO_GetPortValue+0x56>
    198a:	2b 81       	ldd	r18, Y+3	; 0x03
    198c:	3c 81       	ldd	r19, Y+4	; 0x04
    198e:	21 30       	cpi	r18, 0x01	; 1
    1990:	31 05       	cpc	r19, r1
    1992:	89 f0       	breq	.+34     	; 0x19b6 <DIO_GetPortValue+0x60>
    1994:	23 c0       	rjmp	.+70     	; 0x19dc <DIO_GetPortValue+0x86>
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	a9 f0       	breq	.+42     	; 0x19ca <DIO_GetPortValue+0x74>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	24 30       	cpi	r18, 0x04	; 4
    19a6:	31 05       	cpc	r19, r1
    19a8:	a9 f0       	breq	.+42     	; 0x19d4 <DIO_GetPortValue+0x7e>
    19aa:	18 c0       	rjmp	.+48     	; 0x19dc <DIO_GetPortValue+0x86>
	{
	case PORTA :u8Valuecopy = PINA_Register; break;
    19ac:	e9 e3       	ldi	r30, 0x39	; 57
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <DIO_GetPortValue+0x86>
	case PORTB :u8Valuecopy = PINB_Register; break;
    19b6:	e6 e3       	ldi	r30, 0x36	; 54
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	0e c0       	rjmp	.+28     	; 0x19dc <DIO_GetPortValue+0x86>
	case PORTC :u8Valuecopy = PINC_Register; break;
    19c0:	e3 e3       	ldi	r30, 0x33	; 51
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <DIO_GetPortValue+0x86>
	case PORTD :u8Valuecopy = PIND_Register; break;
    19ca:	e0 e3       	ldi	r30, 0x30	; 48
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <DIO_GetPortValue+0x86>
	case PORTE :u8Valuecopy = PINE_Register; break;
    19d4:	e1 e2       	ldi	r30, 0x21	; 33
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	89 83       	std	Y+1, r24	; 0x01
	default: break;
	}

	return u8Valuecopy;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <I2C_Init>:


#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
    19f8:	00 e7       	ldi	r16, 0x70	; 112
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	e1 e7       	ldi	r30, 0x71	; 113
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	10 82       	st	Z, r1
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e4       	ldi	r21, 0x40	; 64
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	80 e8       	ldi	r24, 0x80	; 128
    1a10:	92 e4       	ldi	r25, 0x42	; 66
    1a12:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	f8 01       	movw	r30, r16
    1a28:	80 83       	st	Z, r24
}	
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <I2C_Start>:


uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <I2C_Start+0x6>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    1a42:	e4 e7       	ldi	r30, 0x74	; 116
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	84 ea       	ldi	r24, 0xA4	; 164
    1a48:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    1a4a:	e4 e7       	ldi	r30, 0x74	; 116
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 23       	and	r24, r24
    1a52:	dc f7       	brge	.-10     	; 0x1a4a <I2C_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1a54:	e1 e7       	ldi	r30, 0x71	; 113
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 7f       	andi	r24, 0xF8	; 248
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 30       	cpi	r24, 0x08	; 8
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <I2C_Start+0x34>
	return 0;												/* If not then return 0 to indicate start condition fail */
    1a64:	1b 82       	std	Y+3, r1	; 0x03
    1a66:	20 c0       	rjmp	.+64     	; 0x1aa8 <I2C_Start+0x74>
	TWDR = slave_write_address;								/* If yes then write SLA+W in TWI data register */
    1a68:	e3 e7       	ldi	r30, 0x73	; 115
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1a70:	e4 e7       	ldi	r30, 0x74	; 116
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	84 e8       	ldi	r24, 0x84	; 132
    1a76:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1a78:	e4 e7       	ldi	r30, 0x74	; 116
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	88 23       	and	r24, r24
    1a80:	dc f7       	brge	.-10     	; 0x1a78 <I2C_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
    1a82:	e1 e7       	ldi	r30, 0x71	; 113
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 7f       	andi	r24, 0xF8	; 248
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	88 31       	cpi	r24, 0x18	; 24
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <I2C_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <I2C_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	80 32       	cpi	r24, 0x20	; 32
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <I2C_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <I2C_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <I2C_Repeated_Start+0x6>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    1ac4:	e4 e7       	ldi	r30, 0x74	; 116
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	84 ea       	ldi	r24, 0xA4	; 164
    1aca:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    1acc:	e4 e7       	ldi	r30, 0x74	; 116
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 23       	and	r24, r24
    1ad4:	dc f7       	brge	.-10     	; 0x1acc <I2C_Repeated_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1ad6:	e1 e7       	ldi	r30, 0x71	; 113
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 7f       	andi	r24, 0xF8	; 248
    1ade:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	80 31       	cpi	r24, 0x10	; 16
    1ae4:	11 f0       	breq	.+4      	; 0x1aea <I2C_Repeated_Start+0x34>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    1ae6:	1b 82       	std	Y+3, r1	; 0x03
    1ae8:	20 c0       	rjmp	.+64     	; 0x1b2a <I2C_Repeated_Start+0x74>
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    1aea:	e3 e7       	ldi	r30, 0x73	; 115
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1af2:	e4 e7       	ldi	r30, 0x74	; 116
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	84 e8       	ldi	r24, 0x84	; 132
    1af8:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1afa:	e4 e7       	ldi	r30, 0x74	; 116
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	dc f7       	brge	.-10     	; 0x1afa <I2C_Repeated_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1b04:	e1 e7       	ldi	r30, 0x71	; 113
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	88 7f       	andi	r24, 0xF8	; 248
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	80 34       	cpi	r24, 0x40	; 64
    1b12:	19 f4       	brne	.+6      	; 0x1b1a <I2C_Repeated_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received */ 
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	8b 83       	std	Y+3, r24	; 0x03
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <I2C_Repeated_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 32       	cpi	r24, 0x20	; 32
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <I2C_Repeated_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	8b 83       	std	Y+3, r24	; 0x03
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <I2C_Repeated_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    1b40:	e4 e7       	ldi	r30, 0x74	; 116
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	84 e9       	ldi	r24, 0x94	; 148
    1b46:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    1b48:	e4 e7       	ldi	r30, 0x74	; 116
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	80 71       	andi	r24, 0x10	; 16
    1b54:	90 70       	andi	r25, 0x00	; 0
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	b9 f7       	brne	.-18     	; 0x1b48 <I2C_Stop+0x10>
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <I2C_Start_Wait+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    1b6c:	e4 e7       	ldi	r30, 0x74	; 116
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	84 ea       	ldi	r24, 0xA4	; 164
    1b72:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    1b74:	e4 e7       	ldi	r30, 0x74	; 116
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	dc f7       	brge	.-10     	; 0x1b74 <I2C_Start_Wait+0x14>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    1b7e:	e1 e7       	ldi	r30, 0x71	; 113
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	88 7f       	andi	r24, 0xF8	; 248
    1b86:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	88 30       	cpi	r24, 0x08	; 8
    1b8c:	79 f7       	brne	.-34     	; 0x1b6c <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    1b8e:	e3 e7       	ldi	r30, 0x73	; 115
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 83       	st	Z, r24
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    1b96:	e4 e7       	ldi	r30, 0x74	; 116
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	84 e8       	ldi	r24, 0x84	; 132
    1b9c:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    1b9e:	e4 e7       	ldi	r30, 0x74	; 116
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	dc f7       	brge	.-10     	; 0x1b9e <I2C_Start_Wait+0x3e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    1ba8:	e1 e7       	ldi	r30, 0x71	; 113
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 7f       	andi	r24, 0xF8	; 248
    1bb0:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	88 31       	cpi	r24, 0x18	; 24
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <I2C_Start_Wait+0x5e>
		{
			I2C_Stop();										/* If not then generate stop condition */
    1bb8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>
    1bbc:	d7 cf       	rjmp	.-82     	; 0x1b6c <I2C_Start_Wait+0xc>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <I2C_Write+0x6>
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    1bd6:	e3 e7       	ldi	r30, 0x73	; 115
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1bde:	e4 e7       	ldi	r30, 0x74	; 116
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	84 e8       	ldi	r24, 0x84	; 132
    1be4:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1be6:	e4 e7       	ldi	r30, 0x74	; 116
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	dc f7       	brge	.-10     	; 0x1be6 <I2C_Write+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1bf0:	e1 e7       	ldi	r30, 0x71	; 113
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 7f       	andi	r24, 0xF8	; 248
    1bf8:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	88 32       	cpi	r24, 0x28	; 40
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <I2C_Write+0x3c>
	return 0;												/* If yes then return 0 to indicate ack received */
    1c00:	1b 82       	std	Y+3, r1	; 0x03
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <I2C_Write+0x4c>
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	80 33       	cpi	r24, 0x30	; 48
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <I2C_Write+0x48>
	return 1;												/* If yes then return 1 to indicate nack received */
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <I2C_Write+0x4c>
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	8b 83       	std	Y+3, r24	; 0x03
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    1c2a:	e4 e7       	ldi	r30, 0x74	; 116
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	84 ec       	ldi	r24, 0xC4	; 196
    1c30:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    1c32:	e4 e7       	ldi	r30, 0x74	; 116
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	88 23       	and	r24, r24
    1c3a:	dc f7       	brge	.-10     	; 0x1c32 <I2C_Read_Ack+0x10>
	return TWDR;											/* Return received data */
    1c3c:	e3 e7       	ldi	r30, 0x73	; 115
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
}	
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    1c50:	e4 e7       	ldi	r30, 0x74	; 116
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	84 e8       	ldi	r24, 0x84	; 132
    1c56:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    1c58:	e4 e7       	ldi	r30, 0x74	; 116
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	dc f7       	brge	.-10     	; 0x1c58 <I2C_Read_Nack+0x10>
	return TWDR;											/* Return received data */
    1c62:	e3 e7       	ldi	r30, 0x73	; 115
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
}	
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <TIM1_voidInitialize>:
#include "../BIT_MATH.h"
#include "Timer_interface.h"
#include "Timer_register.h"


void TIM1_voidInitialize(void){
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	//SETTING NON INVERTING MODE
	CLR_BIT(TCCR1A_Register,6);
    1c76:	af e4       	ldi	r26, 0x4F	; 79
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ef e4       	ldi	r30, 0x4F	; 79
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7b       	andi	r24, 0xBF	; 191
    1c82:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,7);
    1c84:	af e4       	ldi	r26, 0x4F	; 79
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ef e4       	ldi	r30, 0x4F	; 79
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 68       	ori	r24, 0x80	; 128
    1c90:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_Register,4);
    1c92:	af e4       	ldi	r26, 0x4F	; 79
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	ef e4       	ldi	r30, 0x4F	; 79
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7e       	andi	r24, 0xEF	; 239
    1c9e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,5);
    1ca0:	af e4       	ldi	r26, 0x4F	; 79
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ef e4       	ldi	r30, 0x4F	; 79
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	8c 93       	st	X, r24

	//SETTING FAST PWM MODE
	CLR_BIT(TCCR1A_Register,0);
    1cae:	af e4       	ldi	r26, 0x4F	; 79
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ef e4       	ldi	r30, 0x4F	; 79
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8e 7f       	andi	r24, 0xFE	; 254
    1cba:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,1);
    1cbc:	af e4       	ldi	r26, 0x4F	; 79
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	ef e4       	ldi	r30, 0x4F	; 79
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 60       	ori	r24, 0x02	; 2
    1cc8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,3);
    1cca:	ae e4       	ldi	r26, 0x4E	; 78
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	ee e4       	ldi	r30, 0x4E	; 78
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 60       	ori	r24, 0x08	; 8
    1cd6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,4);
    1cd8:	ae e4       	ldi	r26, 0x4E	; 78
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	ee e4       	ldi	r30, 0x4E	; 78
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 61       	ori	r24, 0x10	; 16
    1ce4:	8c 93       	st	X, r24

	//SET PRESCALAR
	CLR_BIT(TCCR1B_Register,0);
    1ce6:	ae e4       	ldi	r26, 0x4E	; 78
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ee e4       	ldi	r30, 0x4E	; 78
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,1);
    1cf4:	ae e4       	ldi	r26, 0x4E	; 78
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	ee e4       	ldi	r30, 0x4E	; 78
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	82 60       	ori	r24, 0x02	; 2
    1d00:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_Register,2);
    1d02:	ae e4       	ldi	r26, 0x4E	; 78
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ee e4       	ldi	r30, 0x4E	; 78
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8b 7f       	andi	r24, 0xFB	; 251
    1d0e:	8c 93       	st	X, r24

}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <TIM3_voidInitialize>:

void TIM3_voidInitialize(void){
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	//SETTING NON INVERTING MODE
	CLR_BIT(TCCR3A_Register,6);
    1d1e:	ab e8       	ldi	r26, 0x8B	; 139
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e8       	ldi	r30, 0x8B	; 139
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	8f 7b       	andi	r24, 0xBF	; 191
    1d2a:	8c 93       	st	X, r24
	SET_BIT(TCCR3A_Register,7);
    1d2c:	ab e8       	ldi	r26, 0x8B	; 139
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e8       	ldi	r30, 0x8B	; 139
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	8c 93       	st	X, r24
	CLR_BIT(TCCR3A_Register,4);
    1d3a:	ab e8       	ldi	r26, 0x8B	; 139
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	eb e8       	ldi	r30, 0x8B	; 139
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	8c 93       	st	X, r24
	SET_BIT(TCCR3A_Register,5);
    1d48:	ab e8       	ldi	r26, 0x8B	; 139
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	eb e8       	ldi	r30, 0x8B	; 139
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	8c 93       	st	X, r24

	//SETTING FAST PWM MODE
	CLR_BIT(TCCR3A_Register,0);
    1d56:	ab e8       	ldi	r26, 0x8B	; 139
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	eb e8       	ldi	r30, 0x8B	; 139
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e 7f       	andi	r24, 0xFE	; 254
    1d62:	8c 93       	st	X, r24
	SET_BIT(TCCR3A_Register,1);
    1d64:	ab e8       	ldi	r26, 0x8B	; 139
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	eb e8       	ldi	r30, 0x8B	; 139
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	82 60       	ori	r24, 0x02	; 2
    1d70:	8c 93       	st	X, r24
	SET_BIT(TCCR3B_Register,3);
    1d72:	aa e8       	ldi	r26, 0x8A	; 138
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ea e8       	ldi	r30, 0x8A	; 138
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 60       	ori	r24, 0x08	; 8
    1d7e:	8c 93       	st	X, r24
	SET_BIT(TCCR3B_Register,4);
    1d80:	aa e8       	ldi	r26, 0x8A	; 138
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ea e8       	ldi	r30, 0x8A	; 138
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 61       	ori	r24, 0x10	; 16
    1d8c:	8c 93       	st	X, r24

	//SET PRESCALAR
	CLR_BIT(TCCR3B_Register,0);
    1d8e:	aa e8       	ldi	r26, 0x8A	; 138
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ea e8       	ldi	r30, 0x8A	; 138
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	8c 93       	st	X, r24
	SET_BIT(TCCR3B_Register,1);
    1d9c:	aa e8       	ldi	r26, 0x8A	; 138
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	ea e8       	ldi	r30, 0x8A	; 138
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	82 60       	ori	r24, 0x02	; 2
    1da8:	8c 93       	st	X, r24
	CLR_BIT(TCCR3B_Register,2);
    1daa:	aa e8       	ldi	r26, 0x8A	; 138
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ea e8       	ldi	r30, 0x8A	; 138
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8b 7f       	andi	r24, 0xFB	; 251
    1db6:	8c 93       	st	X, r24

}
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <TIM1_voidSetTimerReg>:

void TIM1_voidSetTimerReg(u16 Copy_u16Value){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <TIM1_voidSetTimerReg+0x6>
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Register=Copy_u16Value;
    1dcc:	e6 e4       	ldi	r30, 0x46	; 70
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <TIM3_voidSetTimerReg>:

void TIM3_voidSetTimerReg(u16 Copy_u16Value){
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <TIM3_voidSetTimerReg+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	ICR3L_Register=Copy_u16Value;
    1df0:	e0 e8       	ldi	r30, 0x80	; 128
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <TIM1_A_voidSetCompareVal>:

void TIM1_A_voidSetCompareVal(u16 Copy_u16Value){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <TIM1_A_voidSetCompareVal+0x6>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Register=Copy_u16Value;
    1e14:	ea e4       	ldi	r30, 0x4A	; 74
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <TIM1_B_voidSetCompareVal>:

void TIM1_B_voidSetCompareVal(u16 Copy_u16Value){
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <TIM1_B_voidSetCompareVal+0x6>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Register=Copy_u16Value;
    1e38:	e8 e4       	ldi	r30, 0x48	; 72
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TIM3_A_voidSetCompareVal>:

void TIM3_A_voidSetCompareVal(u16 Copy_u16Value){
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <TIM3_A_voidSetCompareVal+0x6>
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
	OCR3A_Register=Copy_u16Value;
    1e5c:	e6 e8       	ldi	r30, 0x86	; 134
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <TIM3_B_voidSetCompareVal>:

void TIM3_B_voidSetCompareVal(u16 Copy_u16Value){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <TIM3_B_voidSetCompareVal+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	OCR3B_Register=Copy_u16Value;
    1e80:	e4 e8       	ldi	r30, 0x84	; 132
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <TIM3_C_voidSetCompareVal>:

void TIM3_C_voidSetCompareVal(u16 Copy_u16Value){
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <TIM3_C_voidSetCompareVal+0x6>
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	OCR3C_Register=Copy_u16Value;
    1ea4:	e2 e8       	ldi	r30, 0x82	; 130
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <UART_voidInit>:


#include "../STD_TYPES.h"
#include "../BIT_MATH.h"

void UART_voidInit(void){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0;
    1ec4:	19 82       	std	Y+1, r1	; 0x01


	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL1);      //Choosing Asychronus Operation
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	8f 7b       	andi	r24, 0xBF	; 191
    1eca:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(Local_u8UCSRC,UCSRC_UPM11);      //Parity Mode BIT 1 disabled
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8f 7d       	andi	r24, 0xDF	; 223
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM10);       //Parity Mode BIT 0 disabled
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	8f 7e       	andi	r24, 0xEF	; 239
    1ed6:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(Local_u8UCSRC,UCSRC_USBS1);     // Choosing 1 BIT for Stop Bit Selection
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	87 7f       	andi	r24, 0xF7	; 247
    1edc:	89 83       	std	Y+1, r24	; 0x01


	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ11);     // Choosing Character Size for 8 bit
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	84 60       	ori	r24, 0x04	; 4
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ10);
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	82 60       	ori	r24, 0x02	; 2
    1ee8:	89 83       	std	Y+1, r24	; 0x01


	CLR_BIT(Local_u8UCSRC,UCSRC_UCPOL1);   //Clock Polarity Rising
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	8e 7f       	andi	r24, 0xFE	; 254
    1eee:	89 83       	std	Y+1, r24	; 0x01

	UCSR1C=Local_u8UCSRC;
    1ef0:	ed e9       	ldi	r30, 0x9D	; 157
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	80 83       	st	Z, r24

	UBRR1L=BOUAD_RATE;
    1ef8:	e9 e9       	ldi	r30, 0x99	; 153
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	87 e6       	ldi	r24, 0x67	; 103
    1efe:	80 83       	st	Z, r24


	SET_BIT(UCSR1B,UCSRB_RXEN1);  //ENABLE RX
    1f00:	aa e9       	ldi	r26, 0x9A	; 154
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	ea e9       	ldi	r30, 0x9A	; 154
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 61       	ori	r24, 0x10	; 16
    1f0c:	8c 93       	st	X, r24
	SET_BIT(UCSR1B,UCSRB_TXEN1);  //ENABLE TX
    1f0e:	aa e9       	ldi	r26, 0x9A	; 154
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ea e9       	ldi	r30, 0x9A	; 154
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 60       	ori	r24, 0x08	; 8
    1f1a:	8c 93       	st	X, r24


}
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <UART_voidSendData>:


void UART_voidSendData(u8 Copy_u8Data){
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <UART_voidSendData+0x6>
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <UART_voidSendData+0x1e>

	u8 Local_u8Flag;

	while (Local_u8Flag == 0){

	Local_u8Flag=GET_BIT(UCSR1A,UCSRA_UDRE1);
    1f32:	eb e9       	ldi	r30, 0x9B	; 155
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	82 95       	swap	r24
    1f3a:	86 95       	lsr	r24
    1f3c:	87 70       	andi	r24, 0x07	; 7
    1f3e:	81 70       	andi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01

void UART_voidSendData(u8 Copy_u8Data){

	u8 Local_u8Flag;

	while (Local_u8Flag == 0){
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	88 23       	and	r24, r24
    1f46:	a9 f3       	breq	.-22     	; 0x1f32 <UART_voidSendData+0xe>

	Local_u8Flag=GET_BIT(UCSR1A,UCSRA_UDRE1);
	}

	UDR1 = Copy_u8Data;
    1f48:	ec e9       	ldi	r30, 0x9C	; 156
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 83       	st	Z, r24



}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <UART_u8ReceiveData>:


u8 UART_u8ReceiveData(){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <UART_u8ReceiveData+0x6>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <UART_u8ReceiveData+0x1a>
	u8 Local_u8Flag,Local_u8Count;

	while (Local_u8Flag == 0  && Local_u8Count <= USART_TIME_OUT){

		Local_u8Flag=GET_BIT(UCSR1A,UCSRA_RXC1);
    1f66:	eb e9       	ldi	r30, 0x9B	; 155
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	88 27       	eor	r24, r24
    1f70:	88 1f       	adc	r24, r24
    1f72:	8a 83       	std	Y+2, r24	; 0x02


u8 UART_u8ReceiveData(){
	u8 Local_u8Flag,Local_u8Count;

	while (Local_u8Flag == 0  && Local_u8Count <= USART_TIME_OUT){
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 23       	and	r24, r24
    1f78:	b1 f3       	breq	.-20     	; 0x1f66 <UART_u8ReceiveData+0xc>

		Local_u8Flag=GET_BIT(UCSR1A,UCSRA_RXC1);
	}
	Local_u8Count = 0;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
	return UDR1;
    1f7c:	ec e9       	ldi	r30, 0x9C	; 156
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z


}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <BLTH_u8GetBluetoothReading>:
#include "../BIT_MATH.h"


u8 BLTH_ReadingValue;

u8 BLTH_u8GetBluetoothReading(void){
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	0f 92       	push	r0
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Reading;
	Local_u8Reading = UART_u8ReceiveData();
    1f96:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <UART_u8ReceiveData>
    1f9a:	89 83       	std	Y+1, r24	; 0x01


	if(Local_u8Reading == 'F')
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	86 34       	cpi	r24, 0x46	; 70
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <BLTH_u8GetBluetoothReading+0x1e>
	{
		BLTH_ReadingValue = FORWARD;
    1fa2:	84 e1       	ldi	r24, 0x14	; 20
    1fa4:	80 93 08 02 	sts	0x0208, r24
    1fa8:	6f c0       	rjmp	.+222    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
	}

	else if(Local_u8Reading == 'B')
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	82 34       	cpi	r24, 0x42	; 66
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <BLTH_u8GetBluetoothReading+0x2c>
		{
			BLTH_ReadingValue = BACKWARD;
    1fb0:	85 e1       	ldi	r24, 0x15	; 21
    1fb2:	80 93 08 02 	sts	0x0208, r24
    1fb6:	68 c0       	rjmp	.+208    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>

		}

	else if (Local_u8Reading == 'L'){
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	8c 34       	cpi	r24, 0x4C	; 76
    1fbc:	21 f4       	brne	.+8      	; 0x1fc6 <BLTH_u8GetBluetoothReading+0x3a>

		BLTH_ReadingValue = LEFT;
    1fbe:	87 e1       	ldi	r24, 0x17	; 23
    1fc0:	80 93 08 02 	sts	0x0208, r24
    1fc4:	61 c0       	rjmp	.+194    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>

	}


	else if (Local_u8Reading == 'R'){
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	82 35       	cpi	r24, 0x52	; 82
    1fca:	21 f4       	brne	.+8      	; 0x1fd4 <BLTH_u8GetBluetoothReading+0x48>

		BLTH_ReadingValue = RIGHT;
    1fcc:	86 e1       	ldi	r24, 0x16	; 22
    1fce:	80 93 08 02 	sts	0x0208, r24
    1fd2:	5a c0       	rjmp	.+180    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
	}


	else if (Local_u8Reading == 'S'){
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	83 35       	cpi	r24, 0x53	; 83
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <BLTH_u8GetBluetoothReading+0x56>
		BLTH_ReadingValue = STOP;
    1fda:	88 e1       	ldi	r24, 0x18	; 24
    1fdc:	80 93 08 02 	sts	0x0208, r24
    1fe0:	53 c0       	rjmp	.+166    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
	}


	else if (Local_u8Reading == '1'){
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	81 33       	cpi	r24, 0x31	; 49
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <BLTH_u8GetBluetoothReading+0x64>
			BLTH_ReadingValue = SPEED1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 08 02 	sts	0x0208, r24
    1fee:	4c c0       	rjmp	.+152    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
		}


	else if (Local_u8Reading == '2'){
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	82 33       	cpi	r24, 0x32	; 50
    1ff4:	21 f4       	brne	.+8      	; 0x1ffe <BLTH_u8GetBluetoothReading+0x72>
			BLTH_ReadingValue = SPEED2;
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 93 08 02 	sts	0x0208, r24
    1ffc:	45 c0       	rjmp	.+138    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
		}


	else if (Local_u8Reading == '3'){
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	83 33       	cpi	r24, 0x33	; 51
    2002:	21 f4       	brne	.+8      	; 0x200c <BLTH_u8GetBluetoothReading+0x80>
				BLTH_ReadingValue = SPEED3;
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	80 93 08 02 	sts	0x0208, r24
    200a:	3e c0       	rjmp	.+124    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '4'){
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	84 33       	cpi	r24, 0x34	; 52
    2010:	21 f4       	brne	.+8      	; 0x201a <BLTH_u8GetBluetoothReading+0x8e>
				BLTH_ReadingValue = SPEED4;
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	80 93 08 02 	sts	0x0208, r24
    2018:	37 c0       	rjmp	.+110    	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '5'){
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	85 33       	cpi	r24, 0x35	; 53
    201e:	21 f4       	brne	.+8      	; 0x2028 <BLTH_u8GetBluetoothReading+0x9c>
				BLTH_ReadingValue = SPEED5;
    2020:	85 e0       	ldi	r24, 0x05	; 5
    2022:	80 93 08 02 	sts	0x0208, r24
    2026:	30 c0       	rjmp	.+96     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '6'){
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	86 33       	cpi	r24, 0x36	; 54
    202c:	21 f4       	brne	.+8      	; 0x2036 <BLTH_u8GetBluetoothReading+0xaa>
				BLTH_ReadingValue = SPEED6;
    202e:	86 e0       	ldi	r24, 0x06	; 6
    2030:	80 93 08 02 	sts	0x0208, r24
    2034:	29 c0       	rjmp	.+82     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '7'){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	87 33       	cpi	r24, 0x37	; 55
    203a:	21 f4       	brne	.+8      	; 0x2044 <BLTH_u8GetBluetoothReading+0xb8>
				BLTH_ReadingValue = SPEED7;
    203c:	87 e0       	ldi	r24, 0x07	; 7
    203e:	80 93 08 02 	sts	0x0208, r24
    2042:	22 c0       	rjmp	.+68     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '8'){
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	88 33       	cpi	r24, 0x38	; 56
    2048:	21 f4       	brne	.+8      	; 0x2052 <BLTH_u8GetBluetoothReading+0xc6>
				BLTH_ReadingValue = SPEED8;
    204a:	88 e0       	ldi	r24, 0x08	; 8
    204c:	80 93 08 02 	sts	0x0208, r24
    2050:	1b c0       	rjmp	.+54     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == '9'){
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	89 33       	cpi	r24, 0x39	; 57
    2056:	21 f4       	brne	.+8      	; 0x2060 <BLTH_u8GetBluetoothReading+0xd4>
				BLTH_ReadingValue = SPEED9;
    2058:	89 e0       	ldi	r24, 0x09	; 9
    205a:	80 93 08 02 	sts	0x0208, r24
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}


	else if (Local_u8Reading == 'q'){
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	81 37       	cpi	r24, 0x71	; 113
    2064:	21 f4       	brne	.+8      	; 0x206e <BLTH_u8GetBluetoothReading+0xe2>
				BLTH_ReadingValue = SPEED10;
    2066:	8a e0       	ldi	r24, 0x0A	; 10
    2068:	80 93 08 02 	sts	0x0208, r24
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
			}
	else if (Local_u8Reading == 'V') {
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	86 35       	cpi	r24, 0x56	; 86
    2072:	21 f4       	brne	.+8      	; 0x207c <BLTH_u8GetBluetoothReading+0xf0>
		BLTH_ReadingValue = HOVER_ON;
    2074:	89 e1       	ldi	r24, 0x19	; 25
    2076:	80 93 08 02 	sts	0x0208, r24
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
	}
	else if (Local_u8Reading == 'v'){
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	86 37       	cpi	r24, 0x76	; 118
    2080:	19 f4       	brne	.+6      	; 0x2088 <BLTH_u8GetBluetoothReading+0xfc>
		BLTH_ReadingValue = HOVER_OFF;
    2082:	8a e1       	ldi	r24, 0x1A	; 26
    2084:	80 93 08 02 	sts	0x0208, r24
	}

	return BLTH_ReadingValue;
    2088:	80 91 08 02 	lds	r24, 0x0208




}
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <MPU6050_Init>:
#include "../BIT_MATH.h"

float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;

void MPU6050_Init()										/* Gyro initialization function */
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	2e 97       	sbiw	r28, 0x0e	; 14
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a6 e1       	ldi	r26, 0x16	; 22
    20ae:	b3 e4       	ldi	r27, 0x43	; 67
    20b0:	8b 87       	std	Y+11, r24	; 0x0b
    20b2:	9c 87       	std	Y+12, r25	; 0x0c
    20b4:	ad 87       	std	Y+13, r26	; 0x0d
    20b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    20bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20be:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a ef       	ldi	r20, 0xFA	; 250
    20c6:	54 e4       	ldi	r21, 0x44	; 68
    20c8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8f 83       	std	Y+7, r24	; 0x07
    20d2:	98 87       	std	Y+8, r25	; 0x08
    20d4:	a9 87       	std	Y+9, r26	; 0x09
    20d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d8:	6f 81       	ldd	r22, Y+7	; 0x07
    20da:	78 85       	ldd	r23, Y+8	; 0x08
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	2c f4       	brge	.+10     	; 0x20fa <MPU6050_Init+0x66>
		__ticks = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <MPU6050_Init+0xe4>
	else if (__tmp > 65535)
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	4c f5       	brge	.+82     	; 0x2164 <MPU6050_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	0f c0       	rjmp	.+30     	; 0x215a <MPU6050_Init+0xc6>
    213c:	88 ec       	ldi	r24, 0xC8	; 200
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <MPU6050_Init+0xb4>
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <MPU6050_Init+0xa8>
    2162:	14 c0       	rjmp	.+40     	; 0x218c <MPU6050_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	9e 81       	ldd	r25, Y+6	; 0x06
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <MPU6050_Init+0xf0>
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    218c:	80 ed       	ldi	r24, 0xD0	; 208
    218e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
    2192:	89 e1       	ldi	r24, 0x19	; 25
    2194:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    2198:	87 e0       	ldi	r24, 0x07	; 7
    219a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Stop();
    219e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>

	I2C_Start_Wait(0xD0);
    21a2:	80 ed       	ldi	r24, 0xD0	; 208
    21a4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
    21a8:	8b e6       	ldi	r24, 0x6B	; 107
    21aa:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Stop();
    21b4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>

	I2C_Start_Wait(0xD0);
    21b8:	80 ed       	ldi	r24, 0xD0	; 208
    21ba:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
    21be:	8a e1       	ldi	r24, 0x1A	; 26
    21c0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Stop();
    21ca:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>

	I2C_Start_Wait(0xD0);
    21ce:	80 ed       	ldi	r24, 0xD0	; 208
    21d0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
    21d4:	8b e1       	ldi	r24, 0x1B	; 27
    21d6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
    21da:	88 e1       	ldi	r24, 0x18	; 24
    21dc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Stop();
    21e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>

	I2C_Start_Wait(0xD0);
    21e4:	80 ed       	ldi	r24, 0xD0	; 208
    21e6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
    21ea:	88 e3       	ldi	r24, 0x38	; 56
    21ec:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Write(0x01);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Stop();
    21f6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>
}
    21fa:	2e 96       	adiw	r28, 0x0e	; 14
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <MPU_Start_Loc>:

void MPU_Start_Loc()
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
    2214:	80 ed       	ldi	r24, 0xD0	; 208
    2216:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
    221a:	8b e3       	ldi	r24, 0x3B	; 59
    221c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
    2220:	81 ed       	ldi	r24, 0xD1	; 209
    2222:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <I2C_Repeated_Start>
}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <Read_RawValue>:

void Read_RawValue()
{
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	MPU_Start_Loc();									/* Read Gyro values */
    2238:	0e 94 06 11 	call	0x220c	; 0x220c <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    223c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	18 2f       	mov	r17, r24
    2246:	00 27       	eor	r16, r16
    2248:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	80 2b       	or	r24, r16
    2252:	91 2b       	or	r25, r17
    2254:	aa 27       	eor	r26, r26
    2256:	97 fd       	sbrc	r25, 7
    2258:	a0 95       	com	r26
    225a:	ba 2f       	mov	r27, r26
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	80 93 1d 02 	sts	0x021D, r24
    226c:	90 93 1e 02 	sts	0x021E, r25
    2270:	a0 93 1f 02 	sts	0x021F, r26
    2274:	b0 93 20 02 	sts	0x0220, r27
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    2278:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	18 2f       	mov	r17, r24
    2282:	00 27       	eor	r16, r16
    2284:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	80 2b       	or	r24, r16
    228e:	91 2b       	or	r25, r17
    2290:	aa 27       	eor	r26, r26
    2292:	97 fd       	sbrc	r25, 7
    2294:	a0 95       	com	r26
    2296:	ba 2f       	mov	r27, r26
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	80 93 15 02 	sts	0x0215, r24
    22a8:	90 93 16 02 	sts	0x0216, r25
    22ac:	a0 93 17 02 	sts	0x0217, r26
    22b0:	b0 93 18 02 	sts	0x0218, r27
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    22b4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	18 2f       	mov	r17, r24
    22be:	00 27       	eor	r16, r16
    22c0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	80 2b       	or	r24, r16
    22ca:	91 2b       	or	r25, r17
    22cc:	aa 27       	eor	r26, r26
    22ce:	97 fd       	sbrc	r25, 7
    22d0:	a0 95       	com	r26
    22d2:	ba 2f       	mov	r27, r26
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	80 93 09 02 	sts	0x0209, r24
    22e4:	90 93 0a 02 	sts	0x020A, r25
    22e8:	a0 93 0b 02 	sts	0x020B, r26
    22ec:	b0 93 0c 02 	sts	0x020C, r27
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    22f0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	18 2f       	mov	r17, r24
    22fa:	00 27       	eor	r16, r16
    22fc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	80 2b       	or	r24, r16
    2306:	91 2b       	or	r25, r17
    2308:	aa 27       	eor	r26, r26
    230a:	97 fd       	sbrc	r25, 7
    230c:	a0 95       	com	r26
    230e:	ba 2f       	mov	r27, r26
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	80 93 11 02 	sts	0x0211, r24
    2320:	90 93 12 02 	sts	0x0212, r25
    2324:	a0 93 13 02 	sts	0x0213, r26
    2328:	b0 93 14 02 	sts	0x0214, r27
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    232c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	18 2f       	mov	r17, r24
    2336:	00 27       	eor	r16, r16
    2338:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	80 2b       	or	r24, r16
    2342:	91 2b       	or	r25, r17
    2344:	aa 27       	eor	r26, r26
    2346:	97 fd       	sbrc	r25, 7
    2348:	a0 95       	com	r26
    234a:	ba 2f       	mov	r27, r26
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	80 93 0d 02 	sts	0x020D, r24
    235c:	90 93 0e 02 	sts	0x020E, r25
    2360:	a0 93 0f 02 	sts	0x020F, r26
    2364:	b0 93 10 02 	sts	0x0210, r27
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    2368:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	18 2f       	mov	r17, r24
    2372:	00 27       	eor	r16, r16
    2374:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	80 2b       	or	r24, r16
    237e:	91 2b       	or	r25, r17
    2380:	aa 27       	eor	r26, r26
    2382:	97 fd       	sbrc	r25, 7
    2384:	a0 95       	com	r26
    2386:	ba 2f       	mov	r27, r26
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	80 93 21 02 	sts	0x0221, r24
    2398:	90 93 22 02 	sts	0x0222, r25
    239c:	a0 93 23 02 	sts	0x0223, r26
    23a0:	b0 93 24 02 	sts	0x0224, r27
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    23a4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <I2C_Read_Ack>
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	18 2f       	mov	r17, r24
    23ae:	00 27       	eor	r16, r16
    23b0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <I2C_Read_Nack>
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	80 2b       	or	r24, r16
    23ba:	91 2b       	or	r25, r17
    23bc:	aa 27       	eor	r26, r26
    23be:	97 fd       	sbrc	r25, 7
    23c0:	a0 95       	com	r26
    23c2:	ba 2f       	mov	r27, r26
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	80 93 19 02 	sts	0x0219, r24
    23d4:	90 93 1a 02 	sts	0x021A, r25
    23d8:	a0 93 1b 02 	sts	0x021B, r26
    23dc:	b0 93 1c 02 	sts	0x021C, r27
	I2C_Stop();
    23e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <I2C_Stop>
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <main>:
#include "MCAL/UART_interface.h"
#include "hal/BLTH_interface.h"
#include "hal/MPU6050_register.h"
#include <util/delay.h>
//
void main(){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <main+0x6>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62

	TIM1_voidInitialize();
    23f8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <TIM1_voidInitialize>
	TIM3_voidInitialize();
    23fc:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <TIM3_voidInitialize>
	TIM1_voidSetTimerReg(20000);                         //SET FREQ=50HZ
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	9e e4       	ldi	r25, 0x4E	; 78
    2404:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <TIM1_voidSetTimerReg>
	TIM3_voidSetTimerReg(20000);
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	9e e4       	ldi	r25, 0x4E	; 78
    240c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <TIM3_voidSetTimerReg>

	DIO_SetPortDirection(PORTB,PORT_OUTPUT);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	6f ef       	ldi	r22, 0xFF	; 255
    2414:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTA,PORT_INPUT);
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTE,PORT_OUTPUT);
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	6f ef       	ldi	r22, 0xFF	; 255
    2424:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_SetPortDirection>


	TIM1_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2428:	8c e6       	ldi	r24, 0x6C	; 108
    242a:	97 e0       	ldi	r25, 0x07	; 7
    242c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
	TIM3_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2430:	8c e6       	ldi	r24, 0x6C	; 108
    2432:	97 e0       	ldi	r25, 0x07	; 7
    2434:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
	TIM1_B_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2438:	8c e6       	ldi	r24, 0x6C	; 108
    243a:	97 e0       	ldi	r25, 0x07	; 7
    243c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
	TIM3_B_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2440:	8c e6       	ldi	r24, 0x6C	; 108
    2442:	97 e0       	ldi	r25, 0x07	; 7
    2444:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>



	UART_voidInit();
    2448:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <UART_voidInit>

	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
    244c:	83 e0       	ldi	r24, 0x03	; 3
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,PIN3,PIN_OUTPUT);
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	63 e0       	ldi	r22, 0x03	; 3
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_SetPinDirection>

	u8 Reading,Speed;

while (1){

		Reading = BLTH_u8GetBluetoothReading();
    2460:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <BLTH_u8GetBluetoothReading>
    2464:	8a 83       	std	Y+2, r24	; 0x02
		Speed=BLTH_u8GetBluetoothReading();
    2466:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <BLTH_u8GetBluetoothReading>
    246a:	89 83       	std	Y+1, r24	; 0x01

		if (Reading == FORWARD){
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	84 31       	cpi	r24, 0x14	; 20
    2470:	09 f0       	breq	.+2      	; 0x2474 <main+0x86>
    2472:	5b c0       	rjmp	.+182    	; 0x252a <main+0x13c>

			if  (Speed < SPEED3){
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	88 f4       	brcc	.+34     	; 0x249c <main+0xae>
				TIM1_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    247a:	84 e3       	ldi	r24, 0x34	; 52
    247c:	98 e0       	ldi	r25, 0x08	; 8
    247e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
				TIM3_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2482:	84 e3       	ldi	r24, 0x34	; 52
    2484:	98 e0       	ldi	r25, 0x08	; 8
    2486:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
				TIM1_B_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    248a:	84 e3       	ldi	r24, 0x34	; 52
    248c:	98 e0       	ldi	r25, 0x08	; 8
    248e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
				TIM3_B_voidSetCompareVal(2100);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2492:	84 e3       	ldi	r24, 0x34	; 52
    2494:	98 e0       	ldi	r25, 0x08	; 8
    2496:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    249a:	e2 cf       	rjmp	.-60     	; 0x2460 <main+0x72>

					}
						else if ( (Speed >= SPEED3) &&  (Speed < SPEED5) ){
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	a0 f0       	brcs	.+40     	; 0x24ca <main+0xdc>
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	85 30       	cpi	r24, 0x05	; 5
    24a6:	88 f4       	brcc	.+34     	; 0x24ca <main+0xdc>

							TIM1_A_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24a8:	80 ef       	ldi	r24, 0xF0	; 240
    24aa:	9a e0       	ldi	r25, 0x0A	; 10
    24ac:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24b0:	80 ef       	ldi	r24, 0xF0	; 240
    24b2:	9a e0       	ldi	r25, 0x0A	; 10
    24b4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24b8:	80 ef       	ldi	r24, 0xF0	; 240
    24ba:	9a e0       	ldi	r25, 0x0A	; 10
    24bc:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(2800);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24c0:	80 ef       	ldi	r24, 0xF0	; 240
    24c2:	9a e0       	ldi	r25, 0x0A	; 10
    24c4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    24c8:	cb cf       	rjmp	.-106    	; 0x2460 <main+0x72>

						}

						else if ( (Speed >= SPEED5) &&  (Speed < SPEED8) ){
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	85 30       	cpi	r24, 0x05	; 5
    24ce:	a0 f0       	brcs	.+40     	; 0x24f8 <main+0x10a>
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	88 f4       	brcc	.+34     	; 0x24f8 <main+0x10a>

							TIM1_A_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24d6:	80 e8       	ldi	r24, 0x80	; 128
    24d8:	9c e0       	ldi	r25, 0x0C	; 12
    24da:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24de:	80 e8       	ldi	r24, 0x80	; 128
    24e0:	9c e0       	ldi	r25, 0x0C	; 12
    24e2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24e6:	80 e8       	ldi	r24, 0x80	; 128
    24e8:	9c e0       	ldi	r25, 0x0C	; 12
    24ea:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(3200);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    24ee:	80 e8       	ldi	r24, 0x80	; 128
    24f0:	9c e0       	ldi	r25, 0x0C	; 12
    24f2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    24f6:	b4 cf       	rjmp	.-152    	; 0x2460 <main+0x72>

						}

						else if ( (Speed >= SPEED8) &&  (Speed < SPEED10) ){
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 30       	cpi	r24, 0x08	; 8
    24fc:	08 f4       	brcc	.+2      	; 0x2500 <main+0x112>
    24fe:	b0 cf       	rjmp	.-160    	; 0x2460 <main+0x72>
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	8a 30       	cpi	r24, 0x0A	; 10
    2504:	08 f0       	brcs	.+2      	; 0x2508 <main+0x11a>
    2506:	ac cf       	rjmp	.-168    	; 0x2460 <main+0x72>
							TIM1_A_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2508:	88 ed       	ldi	r24, 0xD8	; 216
    250a:	9e e0       	ldi	r25, 0x0E	; 14
    250c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2510:	88 ed       	ldi	r24, 0xD8	; 216
    2512:	9e e0       	ldi	r25, 0x0E	; 14
    2514:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2518:	88 ed       	ldi	r24, 0xD8	; 216
    251a:	9e e0       	ldi	r25, 0x0E	; 14
    251c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(3800);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2520:	88 ed       	ldi	r24, 0xD8	; 216
    2522:	9e e0       	ldi	r25, 0x0E	; 14
    2524:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2528:	9b cf       	rjmp	.-202    	; 0x2460 <main+0x72>

						}
		}

		else if (Reading == BACKWARD){
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	85 31       	cpi	r24, 0x15	; 21
    252e:	09 f0       	breq	.+2      	; 0x2532 <main+0x144>
    2530:	5b c0       	rjmp	.+182    	; 0x25e8 <main+0x1fa>

			if  (Speed < SPEED3){
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	83 30       	cpi	r24, 0x03	; 3
    2536:	88 f4       	brcc	.+34     	; 0x255a <main+0x16c>

				            TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2540:	84 e3       	ldi	r24, 0x34	; 52
    2542:	98 e0       	ldi	r25, 0x08	; 8
    2544:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2548:	84 e3       	ldi	r24, 0x34	; 52
    254a:	98 e0       	ldi	r25, 0x08	; 8
    254c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2558:	83 cf       	rjmp	.-250    	; 0x2460 <main+0x72>

								}
									else if ( (Speed >= SPEED3) &&  (Speed < SPEED5) ){
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	83 30       	cpi	r24, 0x03	; 3
    255e:	a0 f0       	brcs	.+40     	; 0x2588 <main+0x19a>
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	88 f4       	brcc	.+34     	; 0x2588 <main+0x19a>

										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    256e:	80 ef       	ldi	r24, 0xF0	; 240
    2570:	9a e0       	ldi	r25, 0x0A	; 10
    2572:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2576:	80 ef       	ldi	r24, 0xF0	; 240
    2578:	9a e0       	ldi	r25, 0x0A	; 10
    257a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2586:	6c cf       	rjmp	.-296    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED5) &&  (Speed < SPEED8) ){
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	85 30       	cpi	r24, 0x05	; 5
    258c:	a0 f0       	brcs	.+40     	; 0x25b6 <main+0x1c8>
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	88 30       	cpi	r24, 0x08	; 8
    2592:	88 f4       	brcc	.+34     	; 0x25b6 <main+0x1c8>

										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	9c e0       	ldi	r25, 0x0C	; 12
    25a0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25a4:	80 e8       	ldi	r24, 0x80	; 128
    25a6:	9c e0       	ldi	r25, 0x0C	; 12
    25a8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    25b4:	55 cf       	rjmp	.-342    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED8) &&  (Speed < SPEED10) ){
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	88 30       	cpi	r24, 0x08	; 8
    25ba:	08 f4       	brcc	.+2      	; 0x25be <main+0x1d0>
    25bc:	51 cf       	rjmp	.-350    	; 0x2460 <main+0x72>
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	8a 30       	cpi	r24, 0x0A	; 10
    25c2:	08 f0       	brcs	.+2      	; 0x25c6 <main+0x1d8>
    25c4:	4d cf       	rjmp	.-358    	; 0x2460 <main+0x72>
										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25ce:	88 ed       	ldi	r24, 0xD8	; 216
    25d0:	9e e0       	ldi	r25, 0x0E	; 14
    25d2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25d6:	88 ed       	ldi	r24, 0xD8	; 216
    25d8:	9e e0       	ldi	r25, 0x0E	; 14
    25da:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    25e6:	3c cf       	rjmp	.-392    	; 0x2460 <main+0x72>

									}

		}

		else if (Reading == LEFT){
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	87 31       	cpi	r24, 0x17	; 23
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <main+0x202>
    25ee:	5b c0       	rjmp	.+182    	; 0x26a6 <main+0x2b8>


			if  (Speed < SPEED3){
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	88 f4       	brcc	.+34     	; 0x2618 <main+0x22a>

				            TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    25fe:	84 e3       	ldi	r24, 0x34	; 52
    2600:	98 e0       	ldi	r25, 0x08	; 8
    2602:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(2100);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    260e:	84 e3       	ldi	r24, 0x34	; 52
    2610:	98 e0       	ldi	r25, 0x08	; 8
    2612:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2616:	24 cf       	rjmp	.-440    	; 0x2460 <main+0x72>

								}
									else if ( (Speed >= SPEED3) &&  (Speed < SPEED5) ){
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	83 30       	cpi	r24, 0x03	; 3
    261c:	a0 f0       	brcs	.+40     	; 0x2646 <main+0x258>
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	85 30       	cpi	r24, 0x05	; 5
    2622:	88 f4       	brcc	.+34     	; 0x2646 <main+0x258>

										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    262c:	80 ef       	ldi	r24, 0xF0	; 240
    262e:	9a e0       	ldi	r25, 0x0A	; 10
    2630:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(2800);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    263c:	80 ef       	ldi	r24, 0xF0	; 240
    263e:	9a e0       	ldi	r25, 0x0A	; 10
    2640:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2644:	0d cf       	rjmp	.-486    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED5) &&  (Speed < SPEED8) ){
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	85 30       	cpi	r24, 0x05	; 5
    264a:	a0 f0       	brcs	.+40     	; 0x2674 <main+0x286>
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	88 30       	cpi	r24, 0x08	; 8
    2650:	88 f4       	brcc	.+34     	; 0x2674 <main+0x286>

										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    265a:	80 e8       	ldi	r24, 0x80	; 128
    265c:	9c e0       	ldi	r25, 0x0C	; 12
    265e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(3200);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    266a:	80 e8       	ldi	r24, 0x80	; 128
    266c:	9c e0       	ldi	r25, 0x0C	; 12
    266e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2672:	f6 ce       	rjmp	.-532    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED8) &&  (Speed < SPEED10) ){
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	88 30       	cpi	r24, 0x08	; 8
    2678:	08 f4       	brcc	.+2      	; 0x267c <main+0x28e>
    267a:	f2 ce       	rjmp	.-540    	; 0x2460 <main+0x72>
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8a 30       	cpi	r24, 0x0A	; 10
    2680:	08 f0       	brcs	.+2      	; 0x2684 <main+0x296>
    2682:	ee ce       	rjmp	.-548    	; 0x2460 <main+0x72>
										TIM1_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    268c:	88 ed       	ldi	r24, 0xD8	; 216
    268e:	9e e0       	ldi	r25, 0x0E	; 14
    2690:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(3800);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    269c:	88 ed       	ldi	r24, 0xD8	; 216
    269e:	9e e0       	ldi	r25, 0x0E	; 14
    26a0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    26a4:	dd ce       	rjmp	.-582    	; 0x2460 <main+0x72>



		}

		else if (Reading == RIGHT){
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	86 31       	cpi	r24, 0x16	; 22
    26aa:	09 f0       	breq	.+2      	; 0x26ae <main+0x2c0>
    26ac:	5b c0       	rjmp	.+182    	; 0x2764 <main+0x376>

			if  (Speed < SPEED3){
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	88 f4       	brcc	.+34     	; 0x26d6 <main+0x2e8>

				            TIM1_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26b4:	84 e3       	ldi	r24, 0x34	; 52
    26b6:	98 e0       	ldi	r25, 0x08	; 8
    26b8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
							TIM3_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
							TIM1_B_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26c4:	84 e3       	ldi	r24, 0x34	; 52
    26c6:	98 e0       	ldi	r25, 0x08	; 8
    26c8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
							TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    26d4:	c5 ce       	rjmp	.-630    	; 0x2460 <main+0x72>

								}
									else if ( (Speed >= SPEED3) &&  (Speed < SPEED5) ){
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	83 30       	cpi	r24, 0x03	; 3
    26da:	a0 f0       	brcs	.+40     	; 0x2704 <main+0x316>
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	85 30       	cpi	r24, 0x05	; 5
    26e0:	88 f4       	brcc	.+34     	; 0x2704 <main+0x316>

										TIM1_A_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26e2:	80 ef       	ldi	r24, 0xF0	; 240
    26e4:	9a e0       	ldi	r25, 0x0A	; 10
    26e6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(2800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26f2:	80 ef       	ldi	r24, 0xF0	; 240
    26f4:	9a e0       	ldi	r25, 0x0A	; 10
    26f6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2702:	ae ce       	rjmp	.-676    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED5) &&  (Speed < SPEED8) ){
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	85 30       	cpi	r24, 0x05	; 5
    2708:	a0 f0       	brcs	.+40     	; 0x2732 <main+0x344>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	88 30       	cpi	r24, 0x08	; 8
    270e:	88 f4       	brcc	.+34     	; 0x2732 <main+0x344>

										TIM1_A_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2710:	80 e8       	ldi	r24, 0x80	; 128
    2712:	9c e0       	ldi	r25, 0x0C	; 12
    2714:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(3200);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2720:	80 e8       	ldi	r24, 0x80	; 128
    2722:	9c e0       	ldi	r25, 0x0C	; 12
    2724:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2730:	97 ce       	rjmp	.-722    	; 0x2460 <main+0x72>

									}

									else if ( (Speed >= SPEED8) &&  (Speed < SPEED10) ){
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	88 30       	cpi	r24, 0x08	; 8
    2736:	08 f4       	brcc	.+2      	; 0x273a <main+0x34c>
    2738:	93 ce       	rjmp	.-730    	; 0x2460 <main+0x72>
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	8a 30       	cpi	r24, 0x0A	; 10
    273e:	08 f0       	brcs	.+2      	; 0x2742 <main+0x354>
    2740:	8f ce       	rjmp	.-738    	; 0x2460 <main+0x72>
										TIM1_A_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2742:	88 ed       	ldi	r24, 0xD8	; 216
    2744:	9e e0       	ldi	r25, 0x0E	; 14
    2746:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
										TIM3_A_voidSetCompareVal(0000);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
										TIM1_B_voidSetCompareVal(3800);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2752:	88 ed       	ldi	r24, 0xD8	; 216
    2754:	9e e0       	ldi	r25, 0x0E	; 14
    2756:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
										TIM3_B_voidSetCompareVal(0000);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    2762:	7e ce       	rjmp	.-772    	; 0x2460 <main+0x72>



		}

		else if (Reading == HOVER_ON){
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	89 31       	cpi	r24, 0x19	; 25
    2768:	89 f4       	brne	.+34     	; 0x278c <main+0x39e>



					TIM1_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    276a:	84 e3       	ldi	r24, 0x34	; 52
    276c:	98 e0       	ldi	r25, 0x08	; 8
    276e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
					TIM3_A_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2772:	84 e3       	ldi	r24, 0x34	; 52
    2774:	98 e0       	ldi	r25, 0x08	; 8
    2776:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
					TIM1_B_voidSetCompareVal(2100);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    277a:	84 e3       	ldi	r24, 0x34	; 52
    277c:	98 e0       	ldi	r25, 0x08	; 8
    277e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
					TIM3_B_voidSetCompareVal(2100);                    //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2782:	84 e3       	ldi	r24, 0x34	; 52
    2784:	98 e0       	ldi	r25, 0x08	; 8
    2786:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    278a:	6a ce       	rjmp	.-812    	; 0x2460 <main+0x72>



		}

		else if (Reading == HOVER_OFF){
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	8a 31       	cpi	r24, 0x1A	; 26
    2790:	89 f4       	brne	.+34     	; 0x27b4 <main+0x3c6>

			TIM1_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    2792:	8c e6       	ldi	r24, 0x6C	; 108
    2794:	97 e0       	ldi	r25, 0x07	; 7
    2796:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
			TIM3_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    279a:	8c e6       	ldi	r24, 0x6C	; 108
    279c:	97 e0       	ldi	r25, 0x07	; 7
    279e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
			TIM1_B_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27a2:	8c e6       	ldi	r24, 0x6C	; 108
    27a4:	97 e0       	ldi	r25, 0x07	; 7
    27a6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
			TIM3_B_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27aa:	8c e6       	ldi	r24, 0x6C	; 108
    27ac:	97 e0       	ldi	r25, 0x07	; 7
    27ae:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    27b2:	56 ce       	rjmp	.-852    	; 0x2460 <main+0x72>



		}

		else if (Reading == STOP) {
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	88 31       	cpi	r24, 0x18	; 24
    27b8:	09 f0       	breq	.+2      	; 0x27bc <main+0x3ce>
    27ba:	52 ce       	rjmp	.-860    	; 0x2460 <main+0x72>
			TIM1_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27bc:	8c e6       	ldi	r24, 0x6C	; 108
    27be:	97 e0       	ldi	r25, 0x07	; 7
    27c0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TIM1_A_voidSetCompareVal>
			TIM3_A_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27c4:	8c e6       	ldi	r24, 0x6C	; 108
    27c6:	97 e0       	ldi	r25, 0x07	; 7
    27c8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TIM3_A_voidSetCompareVal>
			TIM1_B_voidSetCompareVal(1900);                     //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27cc:	8c e6       	ldi	r24, 0x6C	; 108
    27ce:	97 e0       	ldi	r25, 0x07	; 7
    27d0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TIM1_B_voidSetCompareVal>
			TIM3_B_voidSetCompareVal(1900);                   //OUTPUT FROM ADC READ TO BRUSHLESS MOTOR ESC
    27d4:	8c e6       	ldi	r24, 0x6C	; 108
    27d6:	97 e0       	ldi	r25, 0x07	; 7
    27d8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIM3_B_voidSetCompareVal>
    27dc:	41 ce       	rjmp	.-894    	; 0x2460 <main+0x72>

000027de <__mulsi3>:
    27de:	62 9f       	mul	r22, r18
    27e0:	d0 01       	movw	r26, r0
    27e2:	73 9f       	mul	r23, r19
    27e4:	f0 01       	movw	r30, r0
    27e6:	82 9f       	mul	r24, r18
    27e8:	e0 0d       	add	r30, r0
    27ea:	f1 1d       	adc	r31, r1
    27ec:	64 9f       	mul	r22, r20
    27ee:	e0 0d       	add	r30, r0
    27f0:	f1 1d       	adc	r31, r1
    27f2:	92 9f       	mul	r25, r18
    27f4:	f0 0d       	add	r31, r0
    27f6:	83 9f       	mul	r24, r19
    27f8:	f0 0d       	add	r31, r0
    27fa:	74 9f       	mul	r23, r20
    27fc:	f0 0d       	add	r31, r0
    27fe:	65 9f       	mul	r22, r21
    2800:	f0 0d       	add	r31, r0
    2802:	99 27       	eor	r25, r25
    2804:	72 9f       	mul	r23, r18
    2806:	b0 0d       	add	r27, r0
    2808:	e1 1d       	adc	r30, r1
    280a:	f9 1f       	adc	r31, r25
    280c:	63 9f       	mul	r22, r19
    280e:	b0 0d       	add	r27, r0
    2810:	e1 1d       	adc	r30, r1
    2812:	f9 1f       	adc	r31, r25
    2814:	bd 01       	movw	r22, r26
    2816:	cf 01       	movw	r24, r30
    2818:	11 24       	eor	r1, r1
    281a:	08 95       	ret

0000281c <__udivmodsi4>:
    281c:	a1 e2       	ldi	r26, 0x21	; 33
    281e:	1a 2e       	mov	r1, r26
    2820:	aa 1b       	sub	r26, r26
    2822:	bb 1b       	sub	r27, r27
    2824:	fd 01       	movw	r30, r26
    2826:	0d c0       	rjmp	.+26     	; 0x2842 <__udivmodsi4_ep>

00002828 <__udivmodsi4_loop>:
    2828:	aa 1f       	adc	r26, r26
    282a:	bb 1f       	adc	r27, r27
    282c:	ee 1f       	adc	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	a2 17       	cp	r26, r18
    2832:	b3 07       	cpc	r27, r19
    2834:	e4 07       	cpc	r30, r20
    2836:	f5 07       	cpc	r31, r21
    2838:	20 f0       	brcs	.+8      	; 0x2842 <__udivmodsi4_ep>
    283a:	a2 1b       	sub	r26, r18
    283c:	b3 0b       	sbc	r27, r19
    283e:	e4 0b       	sbc	r30, r20
    2840:	f5 0b       	sbc	r31, r21

00002842 <__udivmodsi4_ep>:
    2842:	66 1f       	adc	r22, r22
    2844:	77 1f       	adc	r23, r23
    2846:	88 1f       	adc	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	1a 94       	dec	r1
    284c:	69 f7       	brne	.-38     	; 0x2828 <__udivmodsi4_loop>
    284e:	60 95       	com	r22
    2850:	70 95       	com	r23
    2852:	80 95       	com	r24
    2854:	90 95       	com	r25
    2856:	9b 01       	movw	r18, r22
    2858:	ac 01       	movw	r20, r24
    285a:	bd 01       	movw	r22, r26
    285c:	cf 01       	movw	r24, r30
    285e:	08 95       	ret

00002860 <__prologue_saves__>:
    2860:	2f 92       	push	r2
    2862:	3f 92       	push	r3
    2864:	4f 92       	push	r4
    2866:	5f 92       	push	r5
    2868:	6f 92       	push	r6
    286a:	7f 92       	push	r7
    286c:	8f 92       	push	r8
    286e:	9f 92       	push	r9
    2870:	af 92       	push	r10
    2872:	bf 92       	push	r11
    2874:	cf 92       	push	r12
    2876:	df 92       	push	r13
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	ca 1b       	sub	r28, r26
    288a:	db 0b       	sbc	r29, r27
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	09 94       	ijmp

00002898 <__epilogue_restores__>:
    2898:	2a 88       	ldd	r2, Y+18	; 0x12
    289a:	39 88       	ldd	r3, Y+17	; 0x11
    289c:	48 88       	ldd	r4, Y+16	; 0x10
    289e:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28aa:	b9 84       	ldd	r11, Y+9	; 0x09
    28ac:	c8 84       	ldd	r12, Y+8	; 0x08
    28ae:	df 80       	ldd	r13, Y+7	; 0x07
    28b0:	ee 80       	ldd	r14, Y+6	; 0x06
    28b2:	fd 80       	ldd	r15, Y+5	; 0x05
    28b4:	0c 81       	ldd	r16, Y+4	; 0x04
    28b6:	1b 81       	ldd	r17, Y+3	; 0x03
    28b8:	aa 81       	ldd	r26, Y+2	; 0x02
    28ba:	b9 81       	ldd	r27, Y+1	; 0x01
    28bc:	ce 0f       	add	r28, r30
    28be:	d1 1d       	adc	r29, r1
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	ed 01       	movw	r28, r26
    28cc:	08 95       	ret

000028ce <_exit>:
    28ce:	f8 94       	cli

000028d0 <__stop_program>:
    28d0:	ff cf       	rjmp	.-2      	; 0x28d0 <__stop_program>
